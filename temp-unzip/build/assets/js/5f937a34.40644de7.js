"use strict";(self.webpackChunkfigma_to_code_docusaurus=self.webpackChunkfigma_to_code_docusaurus||[]).push([[5523],{8298:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"react_implementation","title":"Framework-Specific Implementation: React","description":"This section provides detailed guidance on implementing Figma designs as React components using GitHub Agent, Copilot, and other AI tools. We\'ll cover component architecture, styling approaches, state management, and performance optimization specifically for React projects.","source":"@site/docs/react_implementation.md","sourceDirName":".","slug":"/react_implementation","permalink":"/Design-to-Code-Playbook/docs/react_implementation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var r=t(4848),a=t(8453);const s={},i="Framework-Specific Implementation: React",l={},c=[{value:"React Component Architecture",id:"react-component-architecture",level:2},{value:"Styling Approaches for React",id:"styling-approaches-for-react",level:2},{value:"1. Styled Components",id:"1-styled-components",level:3},{value:"2. Tailwind CSS",id:"2-tailwind-css",level:3},{value:"3. CSS Modules",id:"3-css-modules",level:3},{value:"React State Management",id:"react-state-management",level:2},{value:"Context API for Theme and Global State",id:"context-api-for-theme-and-global-state",level:3},{value:"React Query for API State",id:"react-query-for-api-state",level:3},{value:"Advanced React Components",id:"advanced-react-components",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"framework-specific-implementation-react",children:"Framework-Specific Implementation: React"})}),"\n",(0,r.jsx)(e.p,{children:"This section provides detailed guidance on implementing Figma designs as React components using GitHub Agent, Copilot, and other AI tools. We'll cover component architecture, styling approaches, state management, and performance optimization specifically for React projects."}),"\n",(0,r.jsx)(e.h2,{id:"react-component-architecture",children:"React Component Architecture"}),"\n",(0,r.jsx)(e.p,{children:"When converting Figma designs to React code, organizing your components following Atomic Design principles creates a scalable and maintainable architecture:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"src/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 atoms/\n\u2502   \u2502   \u251c\u2500\u2500 Button/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Button.tsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Button.styles.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Button.test.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2502   \u251c\u2500\u2500 Input/\n\u2502   \u2502   \u2514\u2500\u2500 Typography/\n\u2502   \u251c\u2500\u2500 molecules/\n\u2502   \u2502   \u251c\u2500\u2500 FormField/\n\u2502   \u2502   \u251c\u2500\u2500 Card/\n\u2502   \u2502   \u2514\u2500\u2500 Modal/\n\u2502   \u2514\u2500\u2500 organisms/\n\u2502       \u251c\u2500\u2500 Header/\n\u2502       \u251c\u2500\u2500 Sidebar/\n\u2502       \u2514\u2500\u2500 DataTable/\n\u251c\u2500\u2500 pages/\n\u2502   \u251c\u2500\u2500 Dashboard/\n\u2502   \u251c\u2500\u2500 Profile/\n\u2502   \u2514\u2500\u2500 Settings/\n\u2514\u2500\u2500 theme/\n    \u251c\u2500\u2500 tokens.ts\n    \u2514\u2500\u2500 globalStyles.ts\n"})}),"\n",(0,r.jsx)(e.p,{children:"This structure allows AI tools to understand component relationships and generate code that fits into your existing architecture."}),"\n",(0,r.jsx)(e.h2,{id:"styling-approaches-for-react",children:"Styling Approaches for React"}),"\n",(0,r.jsx)(e.p,{children:"When converting Figma designs to React, you have several styling options. Here's how to implement each with AI assistance:"}),"\n",(0,r.jsx)(e.h3,{id:"1-styled-components",children:"1. Styled Components"}),"\n",(0,r.jsx)(e.p,{children:"Styled Components is an excellent choice for direct Figma-to-code conversion because it allows encapsulated, component-specific styling:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"// Button.tsx\nimport styled from 'styled-components';\nimport { theme } from '../../theme/tokens';\n\ninterface ButtonProps {\n  variant?: 'primary' | 'secondary' | 'outlined';\n  size?: 'small' | 'medium' | 'large';\n  disabled?: boolean;\n  loading?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onClick?: () => void;\n  children: React.ReactNode;\n}\n\nconst ButtonContainer = styled.button<{\n  variant: string;\n  size: string;\n  disabled: boolean;\n}>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: ${theme.typography.fontFamily};\n  font-weight: ${theme.typography.fontWeightMedium};\n  border-radius: ${theme.borderRadius.md};\n  transition: all 0.2s ease;\n  cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};\n  \n  /* Size styles */\n  padding: ${props => {\n    switch (props.size) {\n      case 'small': return '8px 16px';\n      case 'large': return '16px 32px';\n      default: return '12px 24px';\n    }\n  }};\n  font-size: ${props => {\n    switch (props.size) {\n      case 'small': return theme.typography.fontSize.sm;\n      case 'large': return theme.typography.fontSize.lg;\n      default: return theme.typography.fontSize.md;\n    }\n  }};\n  \n  /* Variant styles */\n  background-color: ${props => {\n    switch (props.variant) {\n      case 'primary': return theme.colors.primary;\n      case 'secondary': return theme.colors.secondary;\n      case 'outlined': return 'transparent';\n      default: return theme.colors.primary;\n    }\n  }};\n  color: ${props => {\n    switch (props.variant) {\n      case 'primary': return theme.colors.white;\n      case 'secondary': return theme.colors.white;\n      case 'outlined': return theme.colors.primary;\n      default: return theme.colors.white;\n    }\n  }};\n  border: ${props => \n    props.variant === 'outlined' \n      ? `1px solid ${theme.colors.primary}` \n      : 'none'\n  };\n  \n  /* State styles */\n  opacity: ${props => (props.disabled ? 0.5 : 1)};\n  \n  &:hover {\n    background-color: ${props => {\n      if (props.disabled) return;\n      switch (props.variant) {\n        case 'primary': return theme.colors.primaryDark;\n        case 'secondary': return theme.colors.secondaryDark;\n        case 'outlined': return theme.colors.primaryLight;\n        default: return theme.colors.primaryDark;\n      }\n    }};\n  }\n  \n  .icon-left {\n    margin-right: 8px;\n  }\n  \n  .icon-right {\n    margin-left: 8px;\n  }\n  \n  .spinner {\n    margin-right: 8px;\n  }\n`;\n\nexport const Button: React.FC<ButtonProps> = ({\n  variant = 'primary',\n  size = 'medium',\n  disabled = false,\n  loading = false,\n  leftIcon,\n  rightIcon,\n  onClick,\n  children,\n  ...props\n}) => {\n  return (\n    <ButtonContainer \n      variant={variant} \n      size={size} \n      disabled={disabled || loading}\n      onClick={onClick}\n      {...props}\n    >\n      {loading && <span className=\"spinner\">\u27f3</span>}\n      {!loading && leftIcon && <span className=\"icon-left\">{leftIcon}</span>}\n      {children}\n      {!loading && rightIcon && <span className=\"icon-right\">{rightIcon}</span>}\n    </ButtonContainer>\n  );\n};\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Prompting GitHub Copilot Agent for Styled Components:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"/agent Create a Button component using styled-components based on this Figma design:\nhttps://www.figma.com/file/abc123/Design-System?node-id=123-456\n\nThe button should:\n1. Support primary, secondary, and outlined variants\n2. Have small, medium, and large sizes\n3. Support disabled and loading states\n4. Allow for left and right icons\n5. Use our theme tokens from src/theme/tokens.ts\n"})}),"\n",(0,r.jsx)(e.h3,{id:"2-tailwind-css",children:"2. Tailwind CSS"}),"\n",(0,r.jsx)(e.p,{children:"Tailwind CSS is another excellent option for Figma-to-code conversion, especially for rapid development:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"// Button.tsx\nimport React from 'react';\nimport clsx from 'clsx';\n\ninterface ButtonProps {\n  variant?: 'primary' | 'secondary' | 'outlined';\n  size?: 'small' | 'medium' | 'large';\n  disabled?: boolean;\n  loading?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onClick?: () => void;\n  className?: string;\n  children: React.ReactNode;\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  variant = 'primary',\n  size = 'medium',\n  disabled = false,\n  loading = false,\n  leftIcon,\n  rightIcon,\n  onClick,\n  className,\n  children,\n  ...props\n}) => {\n  const variantClasses = {\n    primary: 'bg-blue-600 text-white hover:bg-blue-700',\n    secondary: 'bg-gray-600 text-white hover:bg-gray-700',\n    outlined: 'bg-transparent border border-blue-600 text-blue-600 hover:bg-blue-50'\n  };\n  \n  const sizeClasses = {\n    small: 'px-4 py-2 text-sm',\n    medium: 'px-6 py-3 text-base',\n    large: 'px-8 py-4 text-lg'\n  };\n  \n  return (\n    <button \n      className={clsx(\n        'flex items-center justify-center font-medium rounded transition-all duration-200',\n        variantClasses[variant],\n        sizeClasses[size],\n        (disabled || loading) && 'opacity-50 cursor-not-allowed',\n        className\n      )}\n      disabled={disabled || loading}\n      onClick={onClick}\n      {...props}\n    >\n      {loading && <span className=\"animate-spin mr-2\">\u27f3</span>}\n      {!loading && leftIcon && <span className=\"mr-2\">{leftIcon}</span>}\n      {children}\n      {!loading && rightIcon && <span className=\"ml-2\">{rightIcon}</span>}\n    </button>\n  );\n};\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Prompting GitHub Copilot Agent for Tailwind CSS:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"/agent Create a Button component using Tailwind CSS based on this Figma design:\nhttps://www.figma.com/file/abc123/Design-System?node-id=123-456\n\nThe button should:\n1. Support primary, secondary, and outlined variants\n2. Have small, medium, and large sizes\n3. Support disabled and loading states\n4. Allow for left and right icons\n5. Use our Tailwind configuration from tailwind.config.js\n"})}),"\n",(0,r.jsx)(e.h3,{id:"3-css-modules",children:"3. CSS Modules"}),"\n",(0,r.jsx)(e.p,{children:"CSS Modules provide a more traditional approach with good encapsulation:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"// Button.module.css\n.button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: var(--font-family);\n  font-weight: 500;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n\n.button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n/* Sizes */\n.small {\n  padding: 8px 16px;\n  font-size: 14px;\n}\n\n.medium {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n\n.large {\n  padding: 16px 32px;\n  font-size: 18px;\n}\n\n/* Variants */\n.primary {\n  background-color: var(--color-primary);\n  color: white;\n  border: none;\n}\n\n.primary:hover:not(:disabled) {\n  background-color: var(--color-primary-dark);\n}\n\n.secondary {\n  background-color: var(--color-secondary);\n  color: white;\n  border: none;\n}\n\n.secondary:hover:not(:disabled) {\n  background-color: var(--color-secondary-dark);\n}\n\n.outlined {\n  background-color: transparent;\n  color: var(--color-primary);\n  border: 1px solid var(--color-primary);\n}\n\n.outlined:hover:not(:disabled) {\n  background-color: var(--color-primary-light);\n}\n\n/* Icons */\n.iconLeft {\n  margin-right: 8px;\n}\n\n.iconRight {\n  margin-left: 8px;\n}\n\n.spinner {\n  margin-right: 8px;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n// Button.tsx\nimport React from 'react';\nimport styles from './Button.module.css';\nimport clsx from 'clsx';\n\ninterface ButtonProps {\n  variant?: 'primary' | 'secondary' | 'outlined';\n  size?: 'small' | 'medium' | 'large';\n  disabled?: boolean;\n  loading?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onClick?: () => void;\n  className?: string;\n  children: React.ReactNode;\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  variant = 'primary',\n  size = 'medium',\n  disabled = false,\n  loading = false,\n  leftIcon,\n  rightIcon,\n  onClick,\n  className,\n  children,\n  ...props\n}) => {\n  return (\n    <button \n      className={clsx(\n        styles.button,\n        styles[variant],\n        styles[size],\n        className\n      )}\n      disabled={disabled || loading}\n      onClick={onClick}\n      {...props}\n    >\n      {loading && <span className={styles.spinner}>\u27f3</span>}\n      {!loading && leftIcon && <span className={styles.iconLeft}>{leftIcon}</span>}\n      {children}\n      {!loading && rightIcon && <span className={styles.iconRight}>{rightIcon}</span>}\n    </button>\n  );\n};\n"})}),"\n",(0,r.jsx)(e.h2,{id:"react-state-management",children:"React State Management"}),"\n",(0,r.jsx)(e.p,{children:"When implementing complex Figma designs, proper state management is crucial. Here are approaches that work well with AI-assisted code generation:"}),"\n",(0,r.jsx)(e.h3,{id:"context-api-for-theme-and-global-state",children:"Context API for Theme and Global State"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"// ThemeContext.tsx\nimport React, { createContext, useState, useContext, ReactNode } from 'react';\nimport { lightTheme, darkTheme, Theme } from '../theme/tokens';\n\ninterface ThemeContextType {\n  theme: Theme;\n  isDarkMode: boolean;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const ThemeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const theme = isDarkMode ? darkTheme : lightTheme;\n  \n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n  };\n  \n  return (\n    <ThemeContext.Provider value={{ theme, isDarkMode, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Prompting GitHub Copilot Agent for Context API:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"/agent Create a ThemeContext using React Context API that:\n1. Provides light and dark theme options\n2. Allows toggling between themes\n3. Uses our theme tokens from src/theme/tokens.ts\n4. Includes a custom hook for easy access\n"})}),"\n",(0,r.jsx)(e.h3,{id:"react-query-for-api-state",children:"React Query for API State"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"// UserProfile.tsx\nimport React from 'react';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { fetchUserProfile, updateUserProfile } from '../api/userApi';\nimport { Spinner, ErrorMessage, ProfileForm } from '../components';\n\ninterface UserProfileProps {\n  userId: string;\n}\n\nexport const UserProfile: React.FC<UserProfileProps> = ({ userId }) => {\n  const queryClient = useQueryClient();\n  \n  const { data: user, isLoading, error } = useQuery(\n    ['user', userId], \n    () => fetchUserProfile(userId)\n  );\n  \n  const updateMutation = useMutation(\n    (userData) => updateUserProfile(userId, userData),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(['user', userId]);\n      }\n    }\n  );\n  \n  if (isLoading) return <Spinner />;\n  if (error) return <ErrorMessage error={error} />;\n  \n  return (\n    <ProfileForm \n      user={user} \n      onSubmit={updateMutation.mutate}\n      isSubmitting={updateMutation.isLoading}\n    />\n  );\n};\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Prompting GitHub Copilot Agent for React Query:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"/agent Create a UserProfile component that:\n1. Fetches user data using React Query\n2. Displays a loading state while fetching\n3. Shows an error message if the fetch fails\n4. Renders a profile form with the user data\n5. Handles form submission to update the user profile\n6. Uses our existing components from src/components\n"})}),"\n",(0,r.jsx)(e.h2,{id:"advanced-react-components",children:"Advanced React Components"}),"\n",(0,r.jsx)(e.p,{children:"When converting complex Figma designs to React, you'll often need to implement advanced components. Here's an example of a DataTable component that can be generated with AI assistance:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"// DataTable.tsx\nimport React, { useState, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { theme } from '../../theme/tokens';\n\ninterface Column<T> {\n  key: string;\n  title: string;\n  render?: (row: T) => React.ReactNode;\n  sortable?: boolean;\n}\n\ninterface DataTableProps<T> {\n  data: T[];\n  columns: Column<T>[];\n  sortable?: boolean;\n  selectable?: boolean;\n  pagination?: boolean;\n  itemsPerPage?: number;\n  onRowSelect?: (selectedRows: T[]) => void;\n}\n\n// Styled components for the DataTable\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  border-spacing: 0;\n  font-family: ${theme.typography.fontFamily};\n`;\n\nconst TableHeader = styled.th<{ sortable?: boolean }>`\n  padding: 16px;\n  text-align: left;\n  font-weight: ${theme.typography.fontWeightBold};\n  color: ${theme.colors.text};\n  background-color: ${theme.colors.background};\n  border-bottom: 2px solid ${theme.colors.border};\n  cursor: ${props => props.sortable ? 'pointer' : 'default'};\n  \n  &:hover {\n    ${props => props.sortable && `background-color: ${theme.colors.backgroundHover};`}\n  }\n`;\n\nconst TableRow = styled.tr<{ selected?: boolean }>`\n  &:nth-child(even) {\n    background-color: ${theme.colors.backgroundAlt};\n  }\n  \n  &:hover {\n    background-color: ${theme.colors.backgroundHover};\n  }\n  \n  ${props => props.selected && `\n    background-color: ${theme.colors.primaryLight} !important;\n  `}\n`;\n\nconst TableCell = styled.td`\n  padding: 16px;\n  border-bottom: 1px solid ${theme.colors.border};\n`;\n\nconst Pagination = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 16px;\n  padding: 8px 0;\n`;\n\nconst PaginationButton = styled.button<{ disabled?: boolean }>`\n  padding: 8px 16px;\n  background-color: ${props => props.disabled ? theme.colors.disabled : theme.colors.primary};\n  color: white;\n  border: none;\n  border-radius: ${theme.borderRadius.sm};\n  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};\n  opacity: ${props => props.disabled ? 0.5 : 1};\n  \n  &:hover:not(:disabled) {\n    background-color: ${theme.colors.primaryDark};\n  }\n`;\n\nexport function DataTable<T extends { id: string | number }>({\n  data,\n  columns,\n  sortable = true,\n  selectable = false,\n  pagination = true,\n  itemsPerPage = 10,\n  onRowSelect\n}: DataTableProps<T>) {\n  // State for sorting\n  const [sortColumn, setSortColumn] = useState<string | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  \n  // State for selection\n  const [selectedRows, setSelectedRows] = useState<(string | number)[]>([]);\n  \n  // State for pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  \n  // Handle column sort\n  const handleSort = (column: Column<T>) => {\n    if (!sortable || !column.sortable) return;\n    \n    if (sortColumn === column.key) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column.key);\n      setSortDirection('asc');\n    }\n  };\n  \n  // Handle row selection\n  const handleRowSelection = (row: T) => {\n    if (!selectable) return;\n    \n    setSelectedRows(prev => {\n      const rowId = row.id;\n      if (prev.includes(rowId)) {\n        const newSelected = prev.filter\n(Content truncated due to size limit. Use line ranges to read in chunks)\n"})})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>i});var o=t(6540);const r={},a=o.createContext(r);function s(n){const e=o.useContext(a);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),o.createElement(a.Provider,{value:e},n.children)}}}]);