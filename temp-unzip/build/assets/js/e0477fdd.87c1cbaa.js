"use strict";(self.webpackChunkfigma_to_code_docusaurus=self.webpackChunkfigma_to_code_docusaurus||[]).push([[3436],{3313:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"setting_up_environment","title":"Setting Up the Development Environment","description":"A well-configured development environment is essential for maximizing the efficiency of converting Figma designs to code, especially when using AI-based tools like GitHub Copilot, GitHub Agent, and integrations with Figma MCP Server. This section details the ideal setup for a modern and productive workflow.","source":"@site/docs/setting_up_environment.md","sourceDirName":".","slug":"/setting_up_environment","permalink":"/Design-to-Code-Playbook/docs/setting_up_environment","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var t=i(4848),r=i(8453);const s={},l="Setting Up the Development Environment",a={},c=[{value:"VS Code Configuration",id:"vs-code-configuration",level:2},{value:"Essential Extensions",id:"essential-extensions",level:3},{value:"settings.json Configuration",id:"settingsjson-configuration",level:3},{value:"Installing Required Node Modules",id:"installing-required-node-modules",level:2},{value:"For React Projects",id:"for-react-projects",level:3},{value:"For Angular Projects",id:"for-angular-projects",level:3},{value:"Figma MCP Server Configuration",id:"figma-mcp-server-configuration",level:2},{value:"1. Obtain a Figma API Token",id:"1-obtain-a-figma-api-token",level:3},{value:"2. Install Figma Developer MCP",id:"2-install-figma-developer-mcp",level:3},{value:"3. Configure the MCP Server in VS Code",id:"3-configure-the-mcp-server-in-vs-code",level:3},{value:"4. Configure Environment Variables",id:"4-configure-environment-variables",level:3},{value:"GitHub Copilot Agent Configuration",id:"github-copilot-agent-configuration",level:2},{value:"1. Activate Agent Mode in VS Code",id:"1-activate-agent-mode-in-vs-code",level:3},{value:"2. Configure Custom Instructions for the Project",id:"2-configure-custom-instructions-for-the-project",level:3},{value:"3. Configure Rules for Code Generation",id:"3-configure-rules-for-code-generation",level:3},{value:".cursorrules",id:"cursorrules",level:4},{value:".builderrules",id:"builderrules",level:4},{value:".builderignore",id:"builderignore",level:4},{value:"Azure AI Foundry Configuration",id:"azure-ai-foundry-configuration",level:2},{value:"1. Create an Azure AI Foundry Resource",id:"1-create-an-azure-ai-foundry-resource",level:3},{value:"2. Configure Integration in the Project",id:"2-configure-integration-in-the-project",level:3},{value:"Complementary Tools Configuration",id:"complementary-tools-configuration",level:2},{value:"Visual Copilot (Builder.io)",id:"visual-copilot-builderio",level:3},{value:"Cursor",id:"cursor",level:3},{value:"Configuration Verification",id:"configuration-verification",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"setting-up-the-development-environment",children:"Setting Up the Development Environment"})}),"\n",(0,t.jsx)(n.p,{children:"A well-configured development environment is essential for maximizing the efficiency of converting Figma designs to code, especially when using AI-based tools like GitHub Copilot, GitHub Agent, and integrations with Figma MCP Server. This section details the ideal setup for a modern and productive workflow."}),"\n",(0,t.jsx)(n.h2,{id:"vs-code-configuration",children:"VS Code Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Visual Studio Code is the recommended environment for working with GitHub Copilot and Figma integrations. Configure your environment with the following extensions and settings:"}),"\n",(0,t.jsx)(n.h3,{id:"essential-extensions",children:"Essential Extensions"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"GitHub Copilot and GitHub Copilot Chat"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Install the official GitHub Copilot extension"}),"\n",(0,t.jsx)(n.li,{children:"Activate GitHub Copilot Chat for more detailed interactions"}),"\n",(0,t.jsxs)(n.li,{children:["Configure Copilot's agent mode through the command palette (",(0,t.jsx)(n.code,{children:"Ctrl+Shift+P"}),' > "GitHub Copilot: Enable Agent Mode")']}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Figma for VS Code"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Install the official Figma extension for VS Code"}),"\n",(0,t.jsx)(n.li,{children:"Configure authentication with your Figma account"}),"\n",(0,t.jsx)(n.li,{children:"Enable design preview directly in the editor"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Azure Tools Extension"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Required for integration with Azure AI Foundry"}),"\n",(0,t.jsx)(n.li,{children:"Facilitates the configuration of Azure resources for design analysis"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Framework-Specific Extensions"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"For React: React Developer Tools, ESLint, Prettier"}),"\n",(0,t.jsx)(n.li,{children:"For Angular: Angular Language Service, Angular Snippets"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"settingsjson-configuration",children:"settings.json Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Add the following configurations to your VS Code ",(0,t.jsx)(n.code,{children:"settings.json"})," to optimize working with Figma and GitHub Copilot:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "editor.inlineSuggest.enabled": true,\n  "github.copilot.enable": {\n    "*": true,\n    "plaintext": true,\n    "markdown": true,\n    "javascript": true,\n    "typescript": true,\n    "html": true,\n    "css": true,\n    "scss": true\n  },\n  "github.copilot.advanced": {\n    "indentationMode": true,\n    "listMode": true\n  },\n  "mcp.servers": {\n    "figma": {\n      "command": "npx",\n      "args": [\n        "figma-developer-mcp",\n        "--figma-api-key=${env:FIGMA_API_KEY}"\n      ]\n    }\n  },\n  "figma.fileNodeCaching": true,\n  "figma.assetFolder": "${workspaceFolder}/src/assets/figma"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"installing-required-node-modules",children:"Installing Required Node Modules"}),"\n",(0,t.jsx)(n.p,{children:"Depending on the framework you're using, install the necessary packages:"}),"\n",(0,t.jsx)(n.h3,{id:"for-react-projects",children:"For React Projects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Essential packages\nnpm install react react-dom\n\n# Choose a styling option\nnpm install styled-components\n# OR\nnpm install tailwindcss postcss autoprefixer\n# OR\nnpm install @emotion/react @emotion/styled\n\n# Development tools\nnpm install -D typescript @types/react @types/react-dom\nnpm install -D eslint eslint-plugin-react eslint-plugin-jsx-a11y\n\n# Component libraries (optional)\nnpm install @mui/material @mui/icons-material\n# OR\nnpm install @chakra-ui/react @emotion/react @emotion/styled framer-motion\n"})}),"\n",(0,t.jsx)(n.h3,{id:"for-angular-projects",children:"For Angular Projects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create new Angular project\nng new my-project --style=scss\n\n# Add Angular Material\nng add @angular/material\n\n# Additional tools\nnpm install @ngrx/store @ngrx/effects @ngrx/entity\nnpm install ngx-skeleton-loader\n"})}),"\n",(0,t.jsx)(n.h2,{id:"figma-mcp-server-configuration",children:"Figma MCP Server Configuration"}),"\n",(0,t.jsx)(n.p,{children:"The Figma MCP Server (Model Context Protocol) allows GitHub Copilot and other AI agents to directly access design information from Figma. Follow these steps to configure it:"}),"\n",(0,t.jsx)(n.h3,{id:"1-obtain-a-figma-api-token",children:"1. Obtain a Figma API Token"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Log in to your Figma account"}),"\n",(0,t.jsx)(n.li,{children:"Go to Settings > Account > Personal access tokens"}),"\n",(0,t.jsx)(n.li,{children:'Create a new token with a clear description (e.g., "MCP Server Integration")'}),"\n",(0,t.jsx)(n.li,{children:"Copy the generated token for use in the next steps"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-install-figma-developer-mcp",children:"2. Install Figma Developer MCP"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install globally\nnpm install -g figma-developer-mcp\n\n# Or use npx for one-time execution\nnpx figma-developer-mcp --figma-api-key=YOUR_TOKEN_HERE\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-configure-the-mcp-server-in-vs-code",children:"3. Configure the MCP Server in VS Code"}),"\n",(0,t.jsxs)(n.p,{children:["Create a ",(0,t.jsx)(n.code,{children:".mcp.json"})," file in your project root:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "servers": {\n    "figma": {\n      "type": "stdio",\n      "command": "npx",\n      "args": [\n        "figma-developer-mcp",\n        "--figma-api-key=${env:FIGMA_API_KEY}"\n      ]\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"4-configure-environment-variables",children:"4. Configure Environment Variables"}),"\n",(0,t.jsxs)(n.p,{children:["Create a ",(0,t.jsx)(n.code,{children:".env"})," file in your project root:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"FIGMA_API_KEY=your_figma_token_here\nGITHUB_TOKEN=your_github_token_here\nAZURE_AI_FOUNDRY_KEY=your_azure_token_here\nAZURE_AI_FOUNDRY_ENDPOINT=your_azure_endpoint_here\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Add this file to ",(0,t.jsx)(n.code,{children:".gitignore"})," to protect your keys."]}),"\n",(0,t.jsx)(n.h2,{id:"github-copilot-agent-configuration",children:"GitHub Copilot Agent Configuration"}),"\n",(0,t.jsx)(n.p,{children:"GitHub Copilot Agent is an evolution of GitHub Copilot that allows for more complex and autonomous tasks. Configure it by following these steps:"}),"\n",(0,t.jsx)(n.h3,{id:"1-activate-agent-mode-in-vs-code",children:"1. Activate Agent Mode in VS Code"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Open the command palette (",(0,t.jsx)(n.code,{children:"Ctrl+Shift+P"}),")"]}),"\n",(0,t.jsx)(n.li,{children:'Type and select "GitHub Copilot: Enable Agent Mode"'}),"\n",(0,t.jsx)(n.li,{children:"Restart VS Code when prompted"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-configure-custom-instructions-for-the-project",children:"2. Configure Custom Instructions for the Project"}),"\n",(0,t.jsxs)(n.p,{children:["Create a ",(0,t.jsx)(n.code,{children:".github/copilot-instructions.md"})," file in your project root:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markdown",children:"## Figma-to-Code Conversion Instructions\n\n### Code Standards\n- Use TypeScript for all component development\n- Follow Atomic Design principles (atoms, molecules, organisms)\n- Implement responsive design using flexbox and CSS Grid\n- Generate accessibility-compliant code (WCAG AA)\n- Use styled-components for React / SCSS for Angular\n\n### File Structure\n- Create components in a consistent folder structure\n- Include Storybook documentation\n- Add appropriate unit tests\n- Follow design tokens from Figma\n\n### Figma Integration\n- Use the Figma MCP Server to extract precise design information\n- Maintain visual fidelity with the original design\n- Preserve Figma component naming when appropriate\n- Extract and use design variables as CSS tokens\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-configure-rules-for-code-generation",children:"3. Configure Rules for Code Generation"}),"\n",(0,t.jsx)(n.p,{children:"Create the following configuration files in your project root:"}),"\n",(0,t.jsx)(n.h4,{id:"cursorrules",children:".cursorrules"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "typescript": {\n    "componentNaming": "PascalCase",\n    "indentation": 2,\n    "quoteStyle": "single",\n    "componentPattern": "functional"\n  },\n  "css": {\n    "preprocessor": "scss",\n    "methodology": "BEM"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"builderrules",children:".builderrules"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Use TypeScript for all components\nFollow Atomic Design principles\nImplement responsive design with flexbox and CSS Grid\nGenerate WCAG AA compliant code\nExtract design tokens from Figma as CSS variables\n"})}),"\n",(0,t.jsx)(n.h4,{id:"builderignore",children:".builderignore"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"node_modules/\ndist/\nbuild/\n.storybook/\n__tests__/\n*.test.ts\n*.test.tsx\n"})}),"\n",(0,t.jsx)(n.h2,{id:"azure-ai-foundry-configuration",children:"Azure AI Foundry Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Azure AI Foundry can be used for advanced design analysis and code optimization. Configure it by following these steps:"}),"\n",(0,t.jsx)(n.h3,{id:"1-create-an-azure-ai-foundry-resource",children:"1. Create an Azure AI Foundry Resource"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Access the Azure Portal"}),"\n",(0,t.jsx)(n.li,{children:"Create a new Azure AI Foundry resource"}),"\n",(0,t.jsx)(n.li,{children:"Obtain the API key and endpoint"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-configure-integration-in-the-project",children:"2. Configure Integration in the Project"}),"\n",(0,t.jsxs)(n.p,{children:["Create a ",(0,t.jsx)(n.code,{children:"src/utils/azure-ai-foundry.ts"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { AzureAIFoundryClient } from '@azure/ai-foundry';\n\n// Create a client\nexport const aiFoundryClient = new AzureAIFoundryClient({\n  endpoint: process.env.AZURE_AI_FOUNDRY_ENDPOINT || '',\n  apiKey: process.env.AZURE_AI_FOUNDRY_KEY || ''\n});\n\n// Analyze a design\nexport async function analyzeDesign(figmaImage: string) {\n  const result = await aiFoundryClient.analyzeImage({\n    image: figmaImage,\n    features: ['componentDetection', 'accessibilityCheck']\n  });\n  \n  return result;\n}\n\n// Generate optimized code\nexport async function generateOptimizedCode(designSpec: any, framework: 'react' | 'angular') {\n  const result = await aiFoundryClient.generateCode({\n    specification: designSpec,\n    framework: framework,\n    optimizationLevel: 'production'\n  });\n  \n  return result.code;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"complementary-tools-configuration",children:"Complementary Tools Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"visual-copilot-builderio",children:"Visual Copilot (Builder.io)"}),"\n",(0,t.jsx)(n.p,{children:"Visual Copilot by Builder.io is a specialized tool for Figma-to-code conversion that can complement GitHub Copilot:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Install the Visual Copilot plugin in Figma"}),"\n",(0,t.jsx)(n.li,{children:"Configure integration with your GitHub repository"}),"\n",(0,t.jsx)(n.li,{children:"Set code generation preferences (React, Vue, Angular, etc.)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"cursor",children:"Cursor"}),"\n",(0,t.jsx)(n.p,{children:"Cursor is a VS Code-based editor with advanced AI features:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Download and install Cursor (",(0,t.jsx)(n.a,{href:"https://cursor.sh",children:"https://cursor.sh"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Configure integration with Figma MCP Server"}),"\n",(0,t.jsx)(n.li,{children:"Set up keyboard shortcuts for code generation commands"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"configuration-verification",children:"Configuration Verification"}),"\n",(0,t.jsx)(n.p,{children:"After configuring the entire environment, run this checklist to ensure everything is working correctly:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Test GitHub Copilot Agent:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Open a code file"}),"\n",(0,t.jsxs)(n.li,{children:["Use the ",(0,t.jsx)(n.code,{children:"/agent"})," command in the Copilot chat"]}),"\n",(0,t.jsx)(n.li,{children:"Verify that the agent responds correctly"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Test Figma MCP Integration:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use the ",(0,t.jsx)(n.code,{children:"/agent"})," command followed by a Figma link"]}),"\n",(0,t.jsx)(n.li,{children:"Verify that the agent can access design information"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Test Code Generation:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Ask the agent to generate a simple component"}),"\n",(0,t.jsx)(n.li,{children:"Verify that the generated code follows the configured rules"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Test Azure AI Foundry Integration:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Run a simple design analysis"}),"\n",(0,t.jsx)(n.li,{children:"Verify that results are returned correctly"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"With this environment configured, you're ready to make the most of AI tools for converting Figma designs into high-quality code."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var o=i(6540);const t={},r=o.createContext(t);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);