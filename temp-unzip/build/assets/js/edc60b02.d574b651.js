"use strict";(self.webpackChunkfigma_to_code_docusaurus=self.webpackChunkfigma_to_code_docusaurus||[]).push([[7347],{216:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"react-implementation","title":"React Implementation","description":"This section covers how to implement Figma designs in React using AI-assisted development tools. We\'ll focus on component architecture, styling approaches, and best practices for React projects.","source":"@site/docs/react-implementation.md","sourceDirName":".","slug":"/react-implementation","permalink":"/Design-to-Code-Playbook/docs/react-implementation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Framework Implementation","permalink":"/Design-to-Code-Playbook/docs/framework-implementation"},"next":{"title":"Angular Implementation","permalink":"/Design-to-Code-Playbook/docs/angular-implementation"}}');var r=t(4848),i=t(8453);const s={},a="React Implementation",l={},c=[{value:"React Component Architecture",id:"react-component-architecture",level:2},{value:"Styling Approaches for React",id:"styling-approaches-for-react",level:2},{value:"1. Styled Components",id:"1-styled-components",level:3},{value:"2. Tailwind CSS",id:"2-tailwind-css",level:3},{value:"Using GitHub Copilot for React Components",id:"using-github-copilot-for-react-components",level:2},{value:"Example: Converting a Card Component",id:"example-converting-a-card-component",level:3},{value:"Implementing Design Tokens",id:"implementing-design-tokens",level:2},{value:"Component Testing",id:"component-testing",level:2},{value:"Performance Optimization",id:"performance-optimization",level:2}];function p(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"react-implementation",children:"React Implementation"})}),"\n",(0,r.jsx)(e.p,{children:"This section covers how to implement Figma designs in React using AI-assisted development tools. We'll focus on component architecture, styling approaches, and best practices for React projects."}),"\n",(0,r.jsx)(e.h2,{id:"react-component-architecture",children:"React Component Architecture"}),"\n",(0,r.jsx)(e.p,{children:"Organize React components following Atomic Design principles:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"src/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 atoms/\n\u2502   \u2502   \u251c\u2500\u2500 Button/\n\u2502   \u2502   \u251c\u2500\u2500 Input/\n\u2502   \u2502   \u2514\u2500\u2500 Typography/\n\u2502   \u251c\u2500\u2500 molecules/\n\u2502   \u2502   \u251c\u2500\u2500 FormField/\n\u2502   \u2502   \u251c\u2500\u2500 Card/\n\u2502   \u2502   \u2514\u2500\u2500 Modal/\n\u2502   \u2514\u2500\u2500 organisms/\n\u2502       \u251c\u2500\u2500 Header/\n\u2502       \u251c\u2500\u2500 Sidebar/\n\u2502       \u2514\u2500\u2500 DataTable/\n\u251c\u2500\u2500 pages/\n\u2502   \u251c\u2500\u2500 Dashboard/\n\u2502   \u251c\u2500\u2500 Profile/\n\u2502   \u2514\u2500\u2500 Settings/\n\u2514\u2500\u2500 themes/\n    \u251c\u2500\u2500 tokens.js\n    \u2514\u2500\u2500 globalStyles.js\n"})}),"\n",(0,r.jsx)(e.h2,{id:"styling-approaches-for-react",children:"Styling Approaches for React"}),"\n",(0,r.jsx)(e.h3,{id:"1-styled-components",children:"1. Styled Components"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import styled from 'styled-components';\n\nconst ButtonContainer = styled.button`\n  padding: ${props => props.size === 'small' ? '8px 16px' : '12px 24px'};\n  background-color: ${props => props.variant === 'primary' ? 'var(--primary-color)' : 'transparent'};\n  color: ${props => props.variant === 'primary' ? 'white' : 'var(--primary-color)'};\n  border: ${props => props.variant === 'outlined' ? '1px solid var(--primary-color)' : 'none'};\n  border-radius: 4px;\n  font-weight: 500;\n  \n  &:hover {\n    background-color: ${props => props.variant === 'primary' ? 'var(--primary-dark)' : 'var(--gray-100)'};\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nexport const Button = ({ variant = 'primary', size = 'medium', children, ...props }) => (\n  <ButtonContainer variant={variant} size={size} {...props}>\n    {children}\n  </ButtonContainer>\n);\n"})}),"\n",(0,r.jsx)(e.h3,{id:"2-tailwind-css",children:"2. Tailwind CSS"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"const Button = ({ variant = 'primary', size = 'medium', children, ...props }) => {\n  const variantClasses = {\n    primary: 'bg-blue-600 text-white hover:bg-blue-700',\n    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300',\n    outlined: 'bg-transparent border border-blue-600 text-blue-600 hover:bg-blue-50'\n  };\n  \n  const sizeClasses = {\n    small: 'px-4 py-2 text-sm',\n    medium: 'px-6 py-3 text-base',\n    large: 'px-8 py-4 text-lg'\n  };\n  \n  return (\n    <button \n      className={`rounded-md font-medium focus:outline-none focus:ring-2 ${variantClasses[variant]} ${sizeClasses[size]} ${props.disabled ? 'opacity-50 cursor-not-allowed' : ''}`}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n"})}),"\n",(0,r.jsx)(e.h2,{id:"using-github-copilot-for-react-components",children:"Using GitHub Copilot for React Components"}),"\n",(0,r.jsx)(e.h3,{id:"example-converting-a-card-component",children:"Example: Converting a Card Component"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Analyze the Figma design"}),"\n",(0,r.jsx)(e.li,{children:"Prompt GitHub Copilot with:"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Create a React Card component based on the Figma design with:\n- Image at the top\n- Title and subtitle\n- Description text\n- Action buttons at the bottom\n- Support for different sizes (small, medium, large)\n- Optional badge in the corner\n- Hover and focus states\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"3",children:["\n",(0,r.jsx)(e.li,{children:"Review and refine the generated code"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"implementing-design-tokens",children:"Implementing Design Tokens"}),"\n",(0,r.jsx)(e.p,{children:"Convert Figma variables to React design tokens:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// src/themes/tokens.js\nexport const colors = {\n  primary: {\n    main: '#7C3AED',\n    light: '#A78BFA',\n    dark: '#6D28D9',\n  },\n  secondary: {\n    main: '#10B981',\n    light: '#6EE7B7',\n    dark: '#059669',\n  },\n  gray: {\n    50: '#F9FAFB',\n    100: '#F3F4F6',\n    200: '#E5E7EB',\n    300: '#D1D5DB',\n    400: '#9CA3AF',\n    500: '#6B7280',\n    600: '#4B5563',\n    700: '#374151',\n    800: '#1F2937',\n    900: '#111827',\n  },\n  // Additional colors from Figma\n};\n\nexport const typography = {\n  fontFamily: {\n    sans: '\"Inter\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n    mono: '\"Roboto Mono\", monospace',\n  },\n  fontSize: {\n    xs: '0.75rem',\n    sm: '0.875rem',\n    base: '1rem',\n    lg: '1.125rem',\n    xl: '1.25rem',\n    '2xl': '1.5rem',\n    '3xl': '1.875rem',\n    '4xl': '2.25rem',\n    '5xl': '3rem',\n  },\n  // Additional typography from Figma\n};\n\nexport const spacing = {\n  px: '1px',\n  0: '0',\n  0.5: '0.125rem',\n  1: '0.25rem',\n  1.5: '0.375rem',\n  2: '0.5rem',\n  // Additional spacing from Figma\n};\n\n// Additional tokens from Figma\n"})}),"\n",(0,r.jsx)(e.h2,{id:"component-testing",children:"Component Testing"}),"\n",(0,r.jsx)(e.p,{children:"Set up testing for your React components:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import { render, screen, fireEvent } from '@testing-library/react';\nimport { Button } from './Button';\n\ndescribe('Button component', () => {\n  test('renders with primary variant by default', () => {\n    render(<Button>Click me</Button>);\n    const button = screen.getByText('Click me');\n    expect(button).toHaveClass('bg-blue-600');\n  });\n\n  test('renders with correct size classes', () => {\n    render(<Button size=\"large\">Large Button</Button>);\n    const button = screen.getByText('Large Button');\n    expect(button).toHaveClass('px-8 py-4 text-lg');\n  });\n\n  test('handles click events', () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick}>Click me</Button>);\n    fireEvent.click(screen.getByText('Click me'));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  test('is disabled when disabled prop is true', () => {\n    render(<Button disabled>Disabled</Button>);\n    expect(screen.getByText('Disabled')).toBeDisabled();\n  });\n});\n"})}),"\n",(0,r.jsx)(e.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,r.jsx)(e.p,{children:"Optimize your React components for performance:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Use React.memo for pure components"}),"\n",(0,r.jsx)(e.li,{children:"Implement useMemo and useCallback for expensive calculations and callbacks"}),"\n",(0,r.jsx)(e.li,{children:"Use React.lazy and Suspense for code splitting"}),"\n",(0,r.jsx)(e.li,{children:"Implement virtualization for long lists with react-window or react-virtualized"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"By following these React implementation guidelines, you'll be able to efficiently convert your Figma designs into high-quality, maintainable React components."})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>a});var o=t(6540);const r={},i=o.createContext(r);function s(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);