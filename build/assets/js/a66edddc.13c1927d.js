"use strict";(self.webpackChunkfigma_to_code_docusaurus=self.webpackChunkfigma_to_code_docusaurus||[]).push([[442],{4701:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"accessibility_responsiveness","title":"Ensuring Accessibility and Responsiveness","description":"This section covers best practices for ensuring your Figma-to-code implementations are both accessible and responsive, providing an optimal experience for all users regardless of their abilities or devices.","source":"@site/docs/accessibility_responsiveness.md","sourceDirName":".","slug":"/accessibility_responsiveness","permalink":"/Design-to-Code-Playbook/docs/accessibility_responsiveness","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Component Library Implementation","permalink":"/Design-to-Code-Playbook/docs/component_library"},"next":{"title":"Testing and Quality Assurance","permalink":"/Design-to-Code-Playbook/docs/testing_qa"}}');var t=s(4848),r=s(8453);const o={},l="Ensuring Accessibility and Responsiveness",a={},c=[{value:"Accessibility Implementation",id:"accessibility-implementation",level:2},{value:"WCAG Compliance",id:"wcag-compliance",level:3},{value:"Semantic HTML",id:"semantic-html",level:3},{value:"ARIA Attributes",id:"aria-attributes",level:3},{value:"Keyboard Navigation",id:"keyboard-navigation",level:3},{value:"Focus Management",id:"focus-management",level:3},{value:"Color Contrast",id:"color-contrast",level:3},{value:"Responsive Design Implementation",id:"responsive-design-implementation",level:2},{value:"Flexible Layouts",id:"flexible-layouts",level:3},{value:"Media Queries",id:"media-queries",level:3},{value:"Responsive Typography",id:"responsive-typography",level:3},{value:"Responsive Images",id:"responsive-images",level:3},{value:"Container Queries",id:"container-queries",level:3},{value:"Testing Accessibility and Responsiveness",id:"testing-accessibility-and-responsiveness",level:2},{value:"Accessibility Testing",id:"accessibility-testing",level:3},{value:"Responsive Testing",id:"responsive-testing",level:3},{value:"AI-Assisted Accessibility and Responsiveness",id:"ai-assisted-accessibility-and-responsiveness",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"ensuring-accessibility-and-responsiveness",children:"Ensuring Accessibility and Responsiveness"})}),"\n",(0,t.jsx)(n.p,{children:"This section covers best practices for ensuring your Figma-to-code implementations are both accessible and responsive, providing an optimal experience for all users regardless of their abilities or devices."}),"\n",(0,t.jsx)(n.h2,{id:"accessibility-implementation",children:"Accessibility Implementation"}),"\n",(0,t.jsx)(n.h3,{id:"wcag-compliance",children:"WCAG Compliance"}),"\n",(0,t.jsx)(n.p,{children:"Ensure your components meet Web Content Accessibility Guidelines (WCAG) 2.1 AA standards:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Perceivable"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Provide text alternatives for non-text content"}),"\n",(0,t.jsx)(n.li,{children:"Create content that can be presented in different ways"}),"\n",(0,t.jsx)(n.li,{children:"Make it easier for users to see and hear content"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Operable"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Make all functionality available from a keyboard"}),"\n",(0,t.jsx)(n.li,{children:"Give users enough time to read and use content"}),"\n",(0,t.jsx)(n.li,{children:"Do not use content that causes seizures or physical reactions"}),"\n",(0,t.jsx)(n.li,{children:"Help users navigate and find content"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Understandable"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Make text readable and understandable"}),"\n",(0,t.jsx)(n.li,{children:"Make content appear and operate in predictable ways"}),"\n",(0,t.jsx)(n.li,{children:"Help users avoid and correct mistakes"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Robust"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Maximize compatibility with current and future user tools"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"semantic-html",children:"Semantic HTML"}),"\n",(0,t.jsx)(n.p,{children:"Use proper semantic HTML elements for better accessibility:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'// \u274c Poor accessibility\n<div className="button" onClick={handleClick}>\n  Click Me\n</div>\n\n// \u2705 Good accessibility\n<button \n  className="button" \n  onClick={handleClick}\n  aria-label="Submit form"\n  disabled={isDisabled}\n>\n  Click Me\n</button>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"aria-attributes",children:"ARIA Attributes"}),"\n",(0,t.jsx)(n.p,{children:"Implement ARIA (Accessible Rich Internet Applications) attributes when necessary:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'// Modal component example\n<div \n  role="dialog"\n  aria-labelledby="modal-title"\n  aria-describedby="modal-description"\n  aria-modal="true"\n>\n  <h2 id="modal-title">Confirmation</h2>\n  <p id="modal-description">Are you sure you want to proceed?</p>\n  <button onClick={onConfirm}>Confirm</button>\n  <button onClick={onCancel}>Cancel</button>\n</div>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"keyboard-navigation",children:"Keyboard Navigation"}),"\n",(0,t.jsx)(n.p,{children:"Ensure all interactive elements are keyboard accessible:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"// Keyboard-accessible dropdown\nconst Dropdown = ({ options, onSelect }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  \n  const handleKeyDown = (e) => {\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex(prev => Math.min(prev + 1, options.length - 1));\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex(prev => Math.max(prev - 1, 0));\n        break;\n      case 'Enter':\n        if (selectedIndex >= 0) {\n          onSelect(options[selectedIndex]);\n          setIsOpen(false);\n        }\n        break;\n      case 'Escape':\n        setIsOpen(false);\n        break;\n      default:\n        break;\n    }\n  };\n  \n  return (\n    <div className=\"dropdown\">\n      <button \n        onClick={() => setIsOpen(!isOpen)}\n        aria-haspopup=\"listbox\"\n        aria-expanded={isOpen}\n      >\n        Select an option\n      </button>\n      \n      {isOpen && (\n        <ul \n          role=\"listbox\"\n          tabIndex={-1}\n          onKeyDown={handleKeyDown}\n        >\n          {options.map((option, index) => (\n            <li\n              key={option.id}\n              role=\"option\"\n              aria-selected={index === selectedIndex}\n              onClick={() => {\n                onSelect(option);\n                setIsOpen(false);\n              }}\n            >\n              {option.label}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"focus-management",children:"Focus Management"}),"\n",(0,t.jsx)(n.p,{children:"Implement proper focus management for interactive components:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'// Modal with focus trap\nconst Modal = ({ isOpen, onClose, children }) => {\n  const modalRef = useRef(null);\n  const previousFocusRef = useRef(null);\n  \n  useEffect(() => {\n    if (isOpen) {\n      previousFocusRef.current = document.activeElement;\n      \n      // Focus the modal when it opens\n      if (modalRef.current) {\n        modalRef.current.focus();\n      }\n      \n      // Restore focus when modal closes\n      return () => {\n        if (previousFocusRef.current) {\n          previousFocusRef.current.focus();\n        }\n      };\n    }\n  }, [isOpen]);\n  \n  if (!isOpen) return null;\n  \n  return (\n    <div className="modal-overlay">\n      <div \n        ref={modalRef}\n        className="modal"\n        role="dialog"\n        aria-modal="true"\n        tabIndex={-1}\n      >\n        {children}\n        <button onClick={onClose}>Close</button>\n      </div>\n    </div>\n  );\n};\n'})}),"\n",(0,t.jsx)(n.h3,{id:"color-contrast",children:"Color Contrast"}),"\n",(0,t.jsx)(n.p,{children:"Ensure sufficient color contrast for text and interactive elements:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"/* \u274c Poor contrast */\n.button-low-contrast {\n  background-color: #8B5CF6;\n  color: #C4B5FD;\n}\n\n/* \u2705 Good contrast (4.5:1 ratio for normal text) */\n.button-good-contrast {\n  background-color: #6D28D9;\n  color: #FFFFFF;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"responsive-design-implementation",children:"Responsive Design Implementation"}),"\n",(0,t.jsx)(n.h3,{id:"flexible-layouts",children:"Flexible Layouts"}),"\n",(0,t.jsx)(n.p,{children:"Use CSS Flexbox and Grid for flexible layouts:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:".card-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1rem;\n}\n\n.card {\n  display: flex;\n  flex-direction: column;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.card-content {\n  flex: 1;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"media-queries",children:"Media Queries"}),"\n",(0,t.jsx)(n.p,{children:"Implement responsive breakpoints with media queries:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"/* Base styles for mobile */\n.container {\n  padding: 1rem;\n}\n\n/* Tablet styles */\n@media (min-width: 768px) {\n  .container {\n    padding: 2rem;\n  }\n}\n\n/* Desktop styles */\n@media (min-width: 1024px) {\n  .container {\n    padding: 3rem;\n    max-width: 1200px;\n    margin: 0 auto;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"responsive-typography",children:"Responsive Typography"}),"\n",(0,t.jsx)(n.p,{children:"Use relative units for typography:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:":root {\n  font-size: 16px;\n}\n\nh1 {\n  font-size: 2rem; /* 32px */\n}\n\nh2 {\n  font-size: 1.5rem; /* 24px */\n}\n\np {\n  font-size: 1rem; /* 16px */\n}\n\n@media (min-width: 768px) {\n  h1 {\n    font-size: 2.5rem; /* 40px */\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"responsive-images",children:"Responsive Images"}),"\n",(0,t.jsx)(n.p,{children:"Implement responsive images:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<img \n  src="image-small.jpg"\n  srcset="image-small.jpg 400w, image-medium.jpg 800w, image-large.jpg 1200w"\n  sizes="(max-width: 600px) 400px, (max-width: 1024px) 800px, 1200px"\n  alt="Description of the image"\n/>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"container-queries",children:"Container Queries"}),"\n",(0,t.jsx)(n.p,{children:"Use container queries for component-level responsiveness (with polyfill for older browsers):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:".card-container {\n  container-type: inline-size;\n}\n\n.card {\n  display: grid;\n  grid-template-columns: 1fr;\n}\n\n@container (min-width: 400px) {\n  .card {\n    grid-template-columns: 200px 1fr;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"testing-accessibility-and-responsiveness",children:"Testing Accessibility and Responsiveness"}),"\n",(0,t.jsx)(n.h3,{id:"accessibility-testing",children:"Accessibility Testing"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Automated Testing"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Using jest-axe for accessibility testing\nimport { axe } from 'jest-axe';\n\ndescribe('Button component', () => {\n  it('should not have accessibility violations', async () => {\n    const { container } = render(<Button>Click me</Button>);\n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n});\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Screen Reader Testing"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Test your components with screen readers like:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"NVDA or JAWS (Windows)"}),"\n",(0,t.jsx)(n.li,{children:"VoiceOver (macOS/iOS)"}),"\n",(0,t.jsx)(n.li,{children:"TalkBack (Android)"}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Keyboard Navigation Testing"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Test tab order, focus indicators, and keyboard shortcuts."}),"\n",(0,t.jsx)(n.h3,{id:"responsive-testing",children:"Responsive Testing"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Visual Testing"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Using Storybook's viewport addon\nexport default {\n  title: 'Components/Card',\n  component: Card,\n  parameters: {\n    viewport: {\n      viewports: {\n        mobile: {\n          name: 'Mobile',\n          styles: {\n            width: '375px',\n            height: '667px',\n          },\n        },\n        tablet: {\n          name: 'Tablet',\n          styles: {\n            width: '768px',\n            height: '1024px',\n          },\n        },\n        desktop: {\n          name: 'Desktop',\n          styles: {\n            width: '1440px',\n            height: '900px',\n          },\n        },\n      },\n      defaultViewport: 'desktop',\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Browser Testing"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Test across different browsers and devices using:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Browser DevTools device emulation"}),"\n",(0,t.jsx)(n.li,{children:"BrowserStack or similar services"}),"\n",(0,t.jsx)(n.li,{children:"Physical device testing"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"ai-assisted-accessibility-and-responsiveness",children:"AI-Assisted Accessibility and Responsiveness"}),"\n",(0,t.jsx)(n.p,{children:"Use GitHub Copilot to help implement accessible and responsive components:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"// Example prompt for GitHub Copilot\n/*\nCreate an accessible and responsive navigation menu component that:\n1. Uses semantic HTML\n2. Is keyboard navigable\n3. Works with screen readers\n4. Collapses to a hamburger menu on mobile\n5. Has proper ARIA attributes\n6. Manages focus correctly\n7. Has sufficient color contrast\n*/\n"})}),"\n",(0,t.jsx)(n.p,{children:"By following these accessibility and responsiveness best practices, you'll ensure your Figma-to-code implementations provide an optimal experience for all users across all devices."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(6540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);