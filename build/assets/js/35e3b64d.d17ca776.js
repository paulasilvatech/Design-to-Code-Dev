"use strict";(self.webpackChunkfigma_to_code_docusaurus=self.webpackChunkfigma_to_code_docusaurus||[]).push([[7599],{6241:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"github-copilot-agent","title":"GitHub Copilot Integration","description":"GitHub Copilot is a powerful AI pair programmer that can significantly accelerate the Figma-to-code conversion process. This section covers how to effectively use GitHub Copilot for design implementation.","source":"@site/docs/github-copilot-agent.md","sourceDirName":".","slug":"/github-copilot-agent","permalink":"/docs/github-copilot-agent","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"AI Tools Integration","permalink":"/docs/ai-tools-integration"},"next":{"title":"Figma MCP Server Integration","permalink":"/docs/figma-mcp-server"}}');var i=t(4848),s=t(8453);const r={},l="GitHub Copilot Integration",a={},c=[{value:"Enabling GitHub Copilot in VS Code",id:"enabling-github-copilot-in-vs-code",level:2},{value:"Custom Instructions for Figma-to-Code",id:"custom-instructions-for-figma-to-code",level:2},{value:"Effective Prompting Techniques",id:"effective-prompting-techniques",level:2},{value:"Simple Component Request:",id:"simple-component-request",level:3},{value:"Complex Component Request:",id:"complex-component-request",level:3},{value:"For Component Tree Generation:",id:"for-component-tree-generation",level:3},{value:"GitHub Copilot Agent Mode",id:"github-copilot-agent-mode",level:2},{value:"Copilot Chat for Design Questions",id:"copilot-chat-for-design-questions",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"github-copilot-integration",children:"GitHub Copilot Integration"})}),"\n",(0,i.jsx)(n.p,{children:"GitHub Copilot is a powerful AI pair programmer that can significantly accelerate the Figma-to-code conversion process. This section covers how to effectively use GitHub Copilot for design implementation."}),"\n",(0,i.jsx)(n.h2,{id:"enabling-github-copilot-in-vs-code",children:"Enabling GitHub Copilot in VS Code"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Install GitHub Copilot extension"}),"\n",(0,i.jsx)(n.li,{children:"Sign in with your GitHub account"}),"\n",(0,i.jsx)(n.li,{children:"Enable Copilot agent mode (through Command Palette)"}),"\n",(0,i.jsx)(n.li,{children:"Configure custom instructions for your project"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"custom-instructions-for-figma-to-code",children:"Custom Instructions for Figma-to-Code"}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:".github/copilot-instructions.md"})," file in your project:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"## Design-to-Code Guidelines\n- Use TypeScript for all component development\n- Follow Atomic Design principles (atoms, molecules, organisms)\n- Implement responsive design using flexbox and CSS Grid\n- Generate accessibility-compliant code (WCAG AA)\n- Use styled-components for React / SCSS for Angular\n\n## Structure\n- Create components in a consistent folder structure\n- Include storybook documentation\n- Add appropriate unit tests\n- Follow design tokens from Figma\n"})}),"\n",(0,i.jsx)(n.h2,{id:"effective-prompting-techniques",children:"Effective Prompting Techniques"}),"\n",(0,i.jsx)(n.h3,{id:"simple-component-request",children:"Simple Component Request:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Create a Button component based on the Figma design with:\n- Primary, secondary, and outlined variants\n- Small, medium, and large sizes\n- Support for left and right icons\n- Disabled state styling\n- Loading state with spinner\n"})}),"\n",(0,i.jsx)(n.h3,{id:"complex-component-request",children:"Complex Component Request:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Generate a DataTable component that:\n1. Supports sorting by column\n2. Includes pagination\n3. Allows row selection\n4. Implements responsive behavior for mobile\n5. Has a search/filter function\n6. Matches the Figma design's visual styling\n"})}),"\n",(0,i.jsx)(n.h3,{id:"for-component-tree-generation",children:"For Component Tree Generation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Analyze the main dashboard layout from the Figma design and:\n1. Create a component hierarchy diagram\n2. Generate the necessary component files\n3. Implement the layout structure\n4. Connect components with proper props drilling\n"})}),"\n",(0,i.jsx)(n.h2,{id:"github-copilot-agent-mode",children:"GitHub Copilot Agent Mode"}),"\n",(0,i.jsx)(n.p,{children:"Agent mode provides a more conversational interface for complex tasks:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Open Command Palette (Ctrl+Shift+P / Cmd+Shift+P)"}),"\n",(0,i.jsx)(n.li,{children:'Type "GitHub Copilot: Start Agent Session"'}),"\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"/help"})," command to see available options"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example agent conversation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"You: /help\nAgent: Here are some commands you can use:\n- /file <filename> - Show the contents of a file\n- /new <filename> - Create a new file\n- /workspace - List files in the workspace\n- /fix - Fix problems in the current file\n- /explain - Explain the selected code\n\nYou: /workspace\nAgent: [Lists files in your project]\n\nYou: I need to convert this Figma component to React: [paste Figma component JSON]\nAgent: [Provides React component implementation]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"copilot-chat-for-design-questions",children:"Copilot Chat for Design Questions"}),"\n",(0,i.jsx)(n.p,{children:"Use Copilot Chat to ask design-related questions:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Open Copilot Chat panel in VS Code"}),"\n",(0,i.jsx)(n.li,{children:"Ask questions about design patterns, implementation approaches, or accessibility"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example questions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'"What\'s the best way to implement this responsive layout from Figma?"'}),"\n",(0,i.jsx)(n.li,{children:'"How should I structure the component props based on these Figma variants?"'}),"\n",(0,i.jsx)(n.li,{children:'"Can you suggest a state management approach for this complex form?"'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By mastering these GitHub Copilot techniques, you'll dramatically accelerate your Figma-to-code workflow and improve the quality of your implementations."})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);