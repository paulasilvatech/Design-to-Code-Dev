"use strict";(self.webpackChunkfigma_to_code_docusaurus=self.webpackChunkfigma_to_code_docusaurus||[]).push([[8057],{7041:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"testing_qa","title":"Testing and Quality Assurance","description":"This section covers best practices for testing and quality assurance in the Figma-to-code conversion process, ensuring your implementations are robust, reliable, and match the original designs.","source":"@site/docs/testing_qa.md","sourceDirName":".","slug":"/testing_qa","permalink":"/docs/testing_qa","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Ensuring Accessibility and Responsiveness","permalink":"/docs/accessibility_responsiveness"},"next":{"title":"Workshop 1-Hour: Figma to Code Essentials","permalink":"/docs/workshop-1-hour"}}');var i=t(4848),o=t(8453);const r={},a="Testing and Quality Assurance",c={},l=[{value:"Testing Strategy",id:"testing-strategy",level:2},{value:"Unit Testing Components",id:"unit-testing-components",level:2},{value:"React Testing with Jest and React Testing Library",id:"react-testing-with-jest-and-react-testing-library",level:3},{value:"Angular Testing with Jasmine and TestBed",id:"angular-testing-with-jasmine-and-testbed",level:3},{value:"Visual Regression Testing",id:"visual-regression-testing",level:2},{value:"Using Storybook and Chromatic",id:"using-storybook-and-chromatic",level:3},{value:"Using Jest Snapshot Testing",id:"using-jest-snapshot-testing",level:3},{value:"Design Fidelity Testing",id:"design-fidelity-testing",level:2},{value:"Pixel-Perfect Comparison",id:"pixel-perfect-comparison",level:3},{value:"Design Token Validation",id:"design-token-validation",level:3},{value:"Accessibility Testing",id:"accessibility-testing",level:2},{value:"Automated Accessibility Testing",id:"automated-accessibility-testing",level:3},{value:"Manual Accessibility Testing Checklist",id:"manual-accessibility-testing-checklist",level:3},{value:"Cross-Browser Testing",id:"cross-browser-testing",level:2},{value:"Using Playwright for Multi-Browser Testing",id:"using-playwright-for-multi-browser-testing",level:3},{value:"Continuous Integration",id:"continuous-integration",level:2},{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:3},{value:"AI-Assisted Testing",id:"ai-assisted-testing",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"testing-and-quality-assurance",children:"Testing and Quality Assurance"})}),"\n",(0,i.jsx)(e.p,{children:"This section covers best practices for testing and quality assurance in the Figma-to-code conversion process, ensuring your implementations are robust, reliable, and match the original designs."}),"\n",(0,i.jsx)(e.h2,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,i.jsx)(e.p,{children:"Implement a comprehensive testing strategy that includes:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Unit Testing"}),": Test individual components in isolation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Integration Testing"}),": Test how components work together"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Visual Regression Testing"}),": Ensure visual consistency with designs"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Accessibility Testing"}),": Verify WCAG compliance"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Cross-Browser Testing"}),": Ensure compatibility across browsers"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Responsive Testing"}),": Verify behavior across device sizes"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"unit-testing-components",children:"Unit Testing Components"}),"\n",(0,i.jsx)(e.h3,{id:"react-testing-with-jest-and-react-testing-library",children:"React Testing with Jest and React Testing Library"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"// Button.test.jsx\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { Button } from './Button';\n\ndescribe('Button component', () => {\n  test('renders with correct text', () => {\n    render(<Button>Click me</Button>);\n    expect(screen.getByText('Click me')).toBeInTheDocument();\n  });\n\n  test('calls onClick handler when clicked', () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick}>Click me</Button>);\n    \n    fireEvent.click(screen.getByText('Click me'));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  test('applies variant classes correctly', () => {\n    const { rerender } = render(<Button variant=\"primary\">Primary</Button>);\n    expect(screen.getByText('Primary')).toHaveClass('btn-primary');\n    \n    rerender(<Button variant=\"secondary\">Secondary</Button>);\n    expect(screen.getByText('Secondary')).toHaveClass('btn-secondary');\n  });\n\n  test('is disabled when disabled prop is true', () => {\n    render(<Button disabled>Disabled</Button>);\n    expect(screen.getByText('Disabled')).toBeDisabled();\n  });\n});\n"})}),"\n",(0,i.jsx)(e.h3,{id:"angular-testing-with-jasmine-and-testbed",children:"Angular Testing with Jasmine and TestBed"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"// button.component.spec.ts\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { ButtonComponent } from './button.component';\n\ndescribe('ButtonComponent', () => {\n  let component: ButtonComponent;\n  let fixture: ComponentFixture<ButtonComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ ButtonComponent ]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ButtonComponent);\n    component = fixture.componentInstance;\n    component.text = 'Click me';\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should render with correct text', () => {\n    const buttonElement = fixture.debugElement.nativeElement.querySelector('button');\n    expect(buttonElement.textContent).toContain('Click me');\n  });\n\n  it('should emit click event when clicked', () => {\n    spyOn(component.clicked, 'emit');\n    const buttonElement = fixture.debugElement.query(By.css('button'));\n    buttonElement.triggerEventHandler('click', null);\n    expect(component.clicked.emit).toHaveBeenCalled();\n  });\n\n  it('should apply correct variant class', () => {\n    component.variant = 'primary';\n    fixture.detectChanges();\n    const buttonElement = fixture.debugElement.nativeElement.querySelector('button');\n    expect(buttonElement.classList).toContain('btn-primary');\n    \n    component.variant = 'secondary';\n    fixture.detectChanges();\n    expect(buttonElement.classList).toContain('btn-secondary');\n  });\n\n  it('should be disabled when disabled is true', () => {\n    component.disabled = true;\n    fixture.detectChanges();\n    const buttonElement = fixture.debugElement.nativeElement.querySelector('button');\n    expect(buttonElement.disabled).toBe(true);\n  });\n});\n"})}),"\n",(0,i.jsx)(e.h2,{id:"visual-regression-testing",children:"Visual Regression Testing"}),"\n",(0,i.jsx)(e.h3,{id:"using-storybook-and-chromatic",children:"Using Storybook and Chromatic"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Set up Storybook"}),":"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"npx sb init\n"})}),"\n",(0,i.jsxs)(e.ol,{start:"2",children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Create stories for your components"}),":"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"// Button.stories.jsx\nimport { Button } from './Button';\n\nexport default {\n  title: 'Components/Button',\n  component: Button,\n  argTypes: {\n    variant: {\n      control: { type: 'select', options: ['primary', 'secondary', 'outlined'] }\n    },\n    size: {\n      control: { type: 'select', options: ['small', 'medium', 'large'] }\n    },\n    disabled: { control: 'boolean' }\n  }\n};\n\nconst Template = (args) => <Button {...args} />;\n\nexport const Primary = Template.bind({});\nPrimary.args = {\n  variant: 'primary',\n  children: 'Primary Button'\n};\n\nexport const Secondary = Template.bind({});\nSecondary.args = {\n  variant: 'secondary',\n  children: 'Secondary Button'\n};\n\nexport const Outlined = Template.bind({});\nOutlined.args = {\n  variant: 'outlined',\n  children: 'Outlined Button'\n};\n\nexport const Small = Template.bind({});\nSmall.args = {\n  size: 'small',\n  children: 'Small Button'\n};\n\nexport const Disabled = Template.bind({});\nDisabled.args = {\n  disabled: true,\n  children: 'Disabled Button'\n};\n"})}),"\n",(0,i.jsxs)(e.ol,{start:"3",children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Integrate with Chromatic"}),":"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"npx chromatic --project-token=your-project-token\n"})}),"\n",(0,i.jsx)(e.h3,{id:"using-jest-snapshot-testing",children:"Using Jest Snapshot Testing"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"// Button.test.jsx\nimport renderer from 'react-test-renderer';\nimport { Button } from './Button';\n\ndescribe('Button snapshots', () => {\n  test('primary button renders correctly', () => {\n    const tree = renderer\n      .create(<Button variant=\"primary\">Primary</Button>)\n      .toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n\n  test('secondary button renders correctly', () => {\n    const tree = renderer\n      .create(<Button variant=\"secondary\">Secondary</Button>)\n      .toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n\n  test('outlined button renders correctly', () => {\n    const tree = renderer\n      .create(<Button variant=\"outlined\">Outlined</Button>)\n      .toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n\n  test('disabled button renders correctly', () => {\n    const tree = renderer\n      .create(<Button disabled>Disabled</Button>)\n      .toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n});\n"})}),"\n",(0,i.jsx)(e.h2,{id:"design-fidelity-testing",children:"Design Fidelity Testing"}),"\n",(0,i.jsx)(e.h3,{id:"pixel-perfect-comparison",children:"Pixel-Perfect Comparison"}),"\n",(0,i.jsx)(e.p,{children:"Use tools like Percy or Applitools to compare rendered components with Figma designs:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// In your test file\nimport { percySnapshot } from '@percy/playwright';\n\ntest('Button matches Figma design', async ({ page }) => {\n  await page.goto('http://localhost:6006/iframe.html?id=components-button--primary');\n  await percySnapshot(page, 'Primary Button');\n});\n"})}),"\n",(0,i.jsx)(e.h3,{id:"design-token-validation",children:"Design Token Validation"}),"\n",(0,i.jsx)(e.p,{children:"Verify that design tokens match Figma variables:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// designTokens.test.js\nimport { colors, typography, spacing } from '../src/theme/tokens';\nimport figmaTokens from './fixtures/figma-tokens.json';\n\ndescribe('Design tokens', () => {\n  test('color tokens match Figma colors', () => {\n    expect(colors.primary[500]).toBe(figmaTokens.colors.primary[500]);\n    expect(colors.secondary[500]).toBe(figmaTokens.colors.secondary[500]);\n    // Test other colors\n  });\n\n  test('typography tokens match Figma typography', () => {\n    expect(typography.fontFamily.sans).toBe(figmaTokens.typography.fontFamily.sans);\n    expect(typography.fontSize.base).toBe(figmaTokens.typography.fontSize.base);\n    // Test other typography values\n  });\n\n  test('spacing tokens match Figma spacing', () => {\n    expect(spacing[4]).toBe(figmaTokens.spacing[4]);\n    expect(spacing[8]).toBe(figmaTokens.spacing[8]);\n    // Test other spacing values\n  });\n});\n"})}),"\n",(0,i.jsx)(e.h2,{id:"accessibility-testing",children:"Accessibility Testing"}),"\n",(0,i.jsx)(e.h3,{id:"automated-accessibility-testing",children:"Automated Accessibility Testing"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Using jest-axe\nimport { render } from '@testing-library/react';\nimport { axe, toHaveNoViolations } from 'jest-axe';\nimport { Button } from './Button';\n\nexpect.extend(toHaveNoViolations);\n\ndescribe('Button accessibility', () => {\n  test('has no accessibility violations', async () => {\n    const { container } = render(<Button>Accessible Button</Button>);\n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n});\n"})}),"\n",(0,i.jsx)(e.h3,{id:"manual-accessibility-testing-checklist",children:"Manual Accessibility Testing Checklist"}),"\n",(0,i.jsx)(e.p,{children:"Create a checklist for manual accessibility testing:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// accessibilityChecklist.js\nexport const accessibilityChecklist = [\n  {\n    category: 'Keyboard Navigation',\n    items: [\n      'Component is focusable with Tab key',\n      'Component can be activated with Enter/Space',\n      'Focus order is logical',\n      'Focus indicator is visible'\n    ]\n  },\n  {\n    category: 'Screen Readers',\n    items: [\n      'Component has appropriate role',\n      'Component has accessible name',\n      'Component state is announced',\n      'Component updates are announced'\n    ]\n  },\n  {\n    category: 'Visual',\n    items: [\n      'Color contrast meets WCAG AA (4.5:1 for normal text)',\n      'Information is not conveyed by color alone',\n      'Text can be resized up to 200% without loss of content',\n      'Component works in high contrast mode'\n    ]\n  }\n];\n"})}),"\n",(0,i.jsx)(e.h2,{id:"cross-browser-testing",children:"Cross-Browser Testing"}),"\n",(0,i.jsx)(e.h3,{id:"using-playwright-for-multi-browser-testing",children:"Using Playwright for Multi-Browser Testing"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// button.spec.js\nconst { test, expect } = require('@playwright/test');\n\ntest.describe('Button component', () => {\n  test('renders correctly across browsers', async ({ page }) => {\n    await page.goto('http://localhost:6006/iframe.html?id=components-button--primary');\n    \n    // Check if button is visible\n    const button = page.locator('button');\n    await expect(button).toBeVisible();\n    \n    // Check text content\n    await expect(button).toHaveText('Primary Button');\n    \n    // Check styles\n    const buttonStyles = await button.evaluate((el) => {\n      const styles = window.getComputedStyle(el);\n      return {\n        backgroundColor: styles.backgroundColor,\n        color: styles.color,\n        borderRadius: styles.borderRadius,\n        padding: `${styles.paddingTop} ${styles.paddingRight} ${styles.paddingBottom} ${styles.paddingLeft}`\n      };\n    });\n    \n    // Verify styles match design\n    expect(buttonStyles.backgroundColor).toBe('rgb(124, 58, 237)'); // #7C3AED\n    expect(buttonStyles.color).toBe('rgb(255, 255, 255)'); // white\n    expect(buttonStyles.borderRadius).toBe('4px');\n  });\n  \n  test('handles click events', async ({ page }) => {\n    await page.goto('http://localhost:6006/iframe.html?id=components-button--primary');\n    \n    // Setup click handler\n    await page.evaluate(() => {\n      window.clicked = false;\n      document.querySelector('button').addEventListener('click', () => {\n        window.clicked = true;\n      });\n    });\n    \n    // Click the button\n    await page.locator('button').click();\n    \n    // Verify click handler was called\n    const clicked = await page.evaluate(() => window.clicked);\n    expect(clicked).toBe(true);\n  });\n});\n"})}),"\n",(0,i.jsx)(e.h2,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,i.jsx)(e.h3,{id:"github-actions-workflow",children:"GitHub Actions Workflow"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:"# .github/workflows/test.yml\nname: Test\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v2\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '16'\n        \n    - name: Install dependencies\n      run: npm ci\n      \n    - name: Run unit tests\n      run: npm test\n      \n    - name: Run linting\n      run: npm run lint\n      \n    - name: Build Storybook\n      run: npm run build-storybook\n      \n    - name: Visual regression tests\n      uses: chromaui/action@v1\n      with:\n        projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}\n        token: ${{ secrets.GITHUB_TOKEN }}\n        \n    - name: Run accessibility tests\n      run: npm run test:a11y\n      \n    - name: Run E2E tests\n      run: npm run test:e2e\n"})}),"\n",(0,i.jsx)(e.h2,{id:"ai-assisted-testing",children:"AI-Assisted Testing"}),"\n",(0,i.jsx)(e.p,{children:"Use GitHub Copilot to help generate tests:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"// Example prompt for GitHub Copilot\n/*\nGenerate comprehensive unit tests for a Button component with the following props:\n- variant: 'primary' | 'secondary' | 'outlined' | 'text'\n- size: 'small' | 'medium' | 'large'\n- leftIcon?: ReactNode\n- rightIcon?: ReactNode\n- isLoading?: boolean\n- isFullWidth?: boolean\n- disabled?: boolean\n- onClick?: () => void\n\nTests should cover:\n1. Rendering with different variants and sizes\n2. Click event handling\n3. Disabled state behavior\n4. Loading state rendering\n5. Icon placement\n*/\n"})}),"\n",(0,i.jsx)(e.p,{children:"By implementing these testing and quality assurance practices, you'll ensure your Figma-to-code implementations are robust, reliable, and match the original designs with high fidelity."})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);