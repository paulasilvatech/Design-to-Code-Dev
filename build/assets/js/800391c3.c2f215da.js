"use strict";(self.webpackChunkfigma_to_code_docusaurus=self.webpackChunkfigma_to_code_docusaurus||[]).push([[5760],{8309:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"angular-implementation","title":"Angular Implementation","description":"This section covers how to implement Figma designs in Angular using AI-assisted development tools. We\'ll focus on component architecture, styling approaches, and best practices for Angular projects.","source":"@site/docs/angular-implementation.md","sourceDirName":".","slug":"/angular-implementation","permalink":"/docs/angular-implementation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"React Implementation","permalink":"/docs/react-implementation"},"next":{"title":"Component Library Implementation","permalink":"/docs/component_library"}}');var a=t(4848),o=t(8453);const i={},l="Angular Implementation",s={},c=[{value:"Angular Component Architecture",id:"angular-component-architecture",level:2},{value:"Styling Approaches for Angular",id:"styling-approaches-for-angular",level:2},{value:"1. SCSS with Angular Material",id:"1-scss-with-angular-material",level:3},{value:"2. Angular Material Theming",id:"2-angular-material-theming",level:3},{value:"Using GitHub Copilot for Angular Components",id:"using-github-copilot-for-angular-components",level:2},{value:"Example: Converting a Card Component",id:"example-converting-a-card-component",level:3},{value:"Component Implementation",id:"component-implementation",level:2},{value:"Angular Material Integration",id:"angular-material-integration",level:2},{value:"Component Testing",id:"component-testing",level:2}];function p(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"angular-implementation",children:"Angular Implementation"})}),"\n",(0,a.jsx)(e.p,{children:"This section covers how to implement Figma designs in Angular using AI-assisted development tools. We'll focus on component architecture, styling approaches, and best practices for Angular projects."}),"\n",(0,a.jsx)(e.h2,{id:"angular-component-architecture",children:"Angular Component Architecture"}),"\n",(0,a.jsx)(e.p,{children:"Organize Angular components following a modular structure:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"src/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u2514\u2500\u2500 guards/\n\u2502   \u251c\u2500\u2500 shared/\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 button/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 input/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 card/\n\u2502   \u2502   \u251c\u2500\u2500 directives/\n\u2502   \u2502   \u2514\u2500\u2500 pipes/\n\u2502   \u251c\u2500\u2500 features/\n\u2502   \u2502   \u251c\u2500\u2500 dashboard/\n\u2502   \u2502   \u251c\u2500\u2500 profile/\n\u2502   \u2502   \u2514\u2500\u2500 settings/\n\u2502   \u2514\u2500\u2500 layout/\n\u2502       \u251c\u2500\u2500 header/\n\u2502       \u251c\u2500\u2500 sidebar/\n\u2502       \u2514\u2500\u2500 footer/\n\u2514\u2500\u2500 assets/\n    \u251c\u2500\u2500 styles/\n    \u2502   \u251c\u2500\u2500 _variables.scss\n    \u2502   \u2514\u2500\u2500 _mixins.scss\n    \u2514\u2500\u2500 images/\n"})}),"\n",(0,a.jsx)(e.h2,{id:"styling-approaches-for-angular",children:"Styling Approaches for Angular"}),"\n",(0,a.jsx)(e.h3,{id:"1-scss-with-angular-material",children:"1. SCSS with Angular Material"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scss",children:"// styles/_variables.scss\n$primary: #7C3AED;\n$primary-light: #A78BFA;\n$primary-dark: #6D28D9;\n$secondary: #10B981;\n$gray-100: #F3F4F6;\n$gray-500: #6B7280;\n$gray-900: #111827;\n\n// component styles\n@import '~@angular/material/theming';\n\n.custom-button {\n  padding: 12px 24px;\n  border-radius: 4px;\n  font-weight: 500;\n  \n  &.primary {\n    background-color: $primary;\n    color: white;\n    \n    &:hover {\n      background-color: $primary-dark;\n    }\n  }\n  \n  &.secondary {\n    background-color: transparent;\n    color: $primary;\n    border: 1px solid $primary;\n    \n    &:hover {\n      background-color: $gray-100;\n    }\n  }\n  \n  &.disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"2-angular-material-theming",children:"2. Angular Material Theming"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"// theme.scss\n@import '~@angular/material/theming';\n@include mat-core();\n\n// Define custom Figma palette\n$figma-primary: (\n  50: #F5F3FF,\n  100: #EDE9FE,\n  200: #DDD6FE,\n  300: #C4B5FD,\n  400: #A78BFA,\n  500: #8B5CF6,\n  600: #7C3AED,\n  700: #6D28D9,\n  800: #5B21B6,\n  900: #4C1D95,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n  )\n);\n\n// Define theme\n$primary: mat-palette($figma-primary);\n$accent: mat-palette($mat-teal, 500, 300, 700);\n$warn: mat-palette($mat-red);\n\n$theme: mat-light-theme($primary, $accent, $warn);\n\n@include angular-material-theme($theme);\n"})}),"\n",(0,a.jsx)(e.h2,{id:"using-github-copilot-for-angular-components",children:"Using GitHub Copilot for Angular Components"}),"\n",(0,a.jsx)(e.h3,{id:"example-converting-a-card-component",children:"Example: Converting a Card Component"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"Analyze the Figma design"}),"\n",(0,a.jsx)(e.li,{children:"Prompt GitHub Copilot with:"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"Create an Angular Card component based on the Figma design with:\n- Image at the top\n- Title and subtitle\n- Description text\n- Action buttons at the bottom\n- Support for different sizes (small, medium, large)\n- Optional badge in the corner\n- Hover and focus states\n"})}),"\n",(0,a.jsxs)(e.ol,{start:"3",children:["\n",(0,a.jsx)(e.li,{children:"Review and refine the generated code"}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"component-implementation",children:"Component Implementation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"// card.component.ts\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss']\n})\nexport class CardComponent {\n  @Input() title: string;\n  @Input() subtitle?: string;\n  @Input() description: string;\n  @Input() imageUrl?: string;\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n  @Input() badge?: string;\n  @Input() actions: {label: string, type: 'primary' | 'secondary'}[] = [];\n  \n  @Output() actionClick = new EventEmitter<number>();\n  \n  onActionClick(index: number): void {\n    this.actionClick.emit(index);\n  }\n}\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",children:'\x3c!-- card.component.html --\x3e\n<div class="card" [ngClass]="size">\n  <div class="card-badge" *ngIf="badge">{{ badge }}</div>\n  \n  <img *ngIf="imageUrl" [src]="imageUrl" alt="Card image" class="card-image">\n  \n  <div class="card-content">\n    <h3 class="card-title">{{ title }}</h3>\n    <h4 class="card-subtitle" *ngIf="subtitle">{{ subtitle }}</h4>\n    <p class="card-description">{{ description }}</p>\n  </div>\n  \n  <div class="card-actions" *ngIf="actions.length > 0">\n    <button \n      *ngFor="let action of actions; let i = index" \n      class="btn" \n      [ngClass]="action.type"\n      (click)="onActionClick(i)">\n      {{ action.label }}\n    </button>\n  </div>\n</div>\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scss",children:"// card.component.scss\n@import 'src/assets/styles/variables';\n\n.card {\n  display: flex;\n  flex-direction: column;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  position: relative;\n  background-color: white;\n  transition: transform 0.2s, box-shadow 0.2s;\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\n  }\n  \n  &.small {\n    max-width: 240px;\n  }\n  \n  &.medium {\n    max-width: 320px;\n  }\n  \n  &.large {\n    max-width: 400px;\n  }\n}\n\n.card-badge {\n  position: absolute;\n  top: 12px;\n  right: 12px;\n  padding: 4px 8px;\n  background-color: $primary;\n  color: white;\n  border-radius: 4px;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n.card-image {\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n}\n\n.card-content {\n  padding: 16px;\n  flex-grow: 1;\n}\n\n.card-title {\n  margin: 0 0 8px;\n  font-size: 18px;\n  font-weight: 600;\n  color: $gray-900;\n}\n\n.card-subtitle {\n  margin: 0 0 12px;\n  font-size: 14px;\n  font-weight: 400;\n  color: $gray-500;\n}\n\n.card-description {\n  margin: 0;\n  font-size: 14px;\n  line-height: 1.5;\n  color: $gray-700;\n}\n\n.card-actions {\n  display: flex;\n  padding: 16px;\n  gap: 8px;\n  border-top: 1px solid $gray-100;\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"angular-material-integration",children:"Angular Material Integration"}),"\n",(0,a.jsx)(e.p,{children:"For more complex components, integrate with Angular Material:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"// app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { AppComponent } from './app.component';\nimport { CardComponent } from './shared/components/card/card.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CardComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatCardModule,\n    MatIconModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n"})}),"\n",(0,a.jsx)(e.h2,{id:"component-testing",children:"Component Testing"}),"\n",(0,a.jsx)(e.p,{children:"Set up testing for your Angular components:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"// card.component.spec.ts\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { CardComponent } from './card.component';\n\ndescribe('CardComponent', () => {\n  let component: CardComponent;\n  let fixture: ComponentFixture<CardComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ CardComponent ]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(CardComponent);\n    component = fixture.componentInstance;\n    component.title = 'Test Card';\n    component.description = 'This is a test description';\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should display title and description', () => {\n    const titleEl = fixture.debugElement.query(By.css('.card-title'));\n    const descEl = fixture.debugElement.query(By.css('.card-description'));\n    \n    expect(titleEl.nativeElement.textContent).toContain('Test Card');\n    expect(descEl.nativeElement.textContent).toContain('This is a test description');\n  });\n\n  it('should apply correct size class', () => {\n    component.size = 'large';\n    fixture.detectChanges();\n    \n    const cardEl = fixture.debugElement.query(By.css('.card'));\n    expect(cardEl.nativeElement.classList).toContain('large');\n  });\n\n  it('should emit action click event', () => {\n    spyOn(component.actionClick, 'emit');\n    component.actions = [{ label: 'Click me', type: 'primary' }];\n    fixture.detectChanges();\n    \n    const buttonEl = fixture.debugElement.query(By.css('.btn'));\n    buttonEl.triggerEventHandler('click', null);\n    \n    expect(component.actionClick.emit).toHaveBeenCalledWith(0);\n  });\n});\n"})}),"\n",(0,a.jsx)(e.p,{children:"By following these Angular implementation guidelines, you'll be able to efficiently convert your Figma designs into high-quality, maintainable Angular components."})]})}function d(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(p,{...n})}):p(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>l});var r=t(6540);const a={},o=r.createContext(a);function i(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);