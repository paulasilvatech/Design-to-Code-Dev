"use strict";(self.webpackChunkfigma_to_code_docusaurus=self.webpackChunkfigma_to_code_docusaurus||[]).push([[6252],{2864:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"component_library","title":"Component Library Implementation","description":"This section covers how to implement a component library based on your Figma designs, ensuring consistency and reusability across your application.","source":"@site/docs/component_library.md","sourceDirName":".","slug":"/component_library","permalink":"/docs/component_library","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Angular Implementation","permalink":"/docs/angular-implementation"},"next":{"title":"Ensuring Accessibility and Responsiveness","permalink":"/docs/accessibility_responsiveness"}}');var r=t(4848),i=t(8453);const s={},a="Component Library Implementation",l={},c=[{value:"Component Library Structure",id:"component-library-structure",level:2},{value:"Design Token Implementation",id:"design-token-implementation",level:2},{value:"Component Implementation Example",id:"component-implementation-example",level:2},{value:"Button Component",id:"button-component",level:3},{value:"Storybook Integration",id:"storybook-integration",level:2},{value:"Testing Components",id:"testing-components",level:2},{value:"Publishing Your Component Library",id:"publishing-your-component-library",level:2}];function p(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"component-library-implementation",children:"Component Library Implementation"})}),"\n",(0,r.jsx)(e.p,{children:"This section covers how to implement a component library based on your Figma designs, ensuring consistency and reusability across your application."}),"\n",(0,r.jsx)(e.h2,{id:"component-library-structure",children:"Component Library Structure"}),"\n",(0,r.jsx)(e.p,{children:"Organize your component library using a clear, hierarchical structure:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"component-library/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 atoms/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Button/\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 Button.tsx\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 Button.styles.ts\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 Button.test.tsx\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 Button.stories.tsx\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Input/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Typography/\n\u2502   \u2502   \u251c\u2500\u2500 molecules/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 FormField/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Card/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Modal/\n\u2502   \u2502   \u2514\u2500\u2500 organisms/\n\u2502   \u2502       \u251c\u2500\u2500 Header/\n\u2502   \u2502       \u251c\u2500\u2500 Sidebar/\n\u2502   \u2502       \u2514\u2500\u2500 DataTable/\n\u2502   \u251c\u2500\u2500 themes/\n\u2502   \u2502   \u251c\u2500\u2500 tokens.ts\n\u2502   \u2502   \u251c\u2500\u2500 light.ts\n\u2502   \u2502   \u2514\u2500\u2500 dark.ts\n\u2502   \u2514\u2500\u2500 utils/\n\u2502       \u251c\u2500\u2500 spacing.ts\n\u2502       \u2514\u2500\u2500 typography.ts\n\u251c\u2500\u2500 .storybook/\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 README.md\n"})}),"\n",(0,r.jsx)(e.h2,{id:"design-token-implementation",children:"Design Token Implementation"}),"\n",(0,r.jsx)(e.p,{children:"Convert Figma design tokens into code:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/themes/tokens.ts\nexport const colors = {\n  primary: {\n    50: '#F5F3FF',\n    100: '#EDE9FE',\n    200: '#DDD6FE',\n    300: '#C4B5FD',\n    400: '#A78BFA',\n    500: '#8B5CF6',\n    600: '#7C3AED',\n    700: '#6D28D9',\n    800: '#5B21B6',\n    900: '#4C1D95',\n  },\n  // Other color scales\n};\n\nexport const spacing = {\n  px: '1px',\n  0: '0',\n  0.5: '0.125rem',\n  1: '0.25rem',\n  1.5: '0.375rem',\n  2: '0.5rem',\n  2.5: '0.625rem',\n  3: '0.75rem',\n  3.5: '0.875rem',\n  4: '1rem',\n  // Additional spacing values\n};\n\nexport const typography = {\n  fontFamily: {\n    sans: '\"Inter\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n    mono: '\"Roboto Mono\", monospace',\n  },\n  fontSize: {\n    xs: '0.75rem',\n    sm: '0.875rem',\n    base: '1rem',\n    lg: '1.125rem',\n    xl: '1.25rem',\n    '2xl': '1.5rem',\n    '3xl': '1.875rem',\n    '4xl': '2.25rem',\n    '5xl': '3rem',\n  },\n  fontWeight: {\n    thin: '100',\n    extralight: '200',\n    light: '300',\n    normal: '400',\n    medium: '500',\n    semibold: '600',\n    bold: '700',\n    extrabold: '800',\n    black: '900',\n  },\n  // Additional typography values\n};\n\nexport const shadows = {\n  sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n  DEFAULT: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',\n  md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n  lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n  xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',\n  '2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',\n  inner: 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',\n  none: 'none',\n};\n\nexport const borderRadius = {\n  none: '0',\n  sm: '0.125rem',\n  DEFAULT: '0.25rem',\n  md: '0.375rem',\n  lg: '0.5rem',\n  xl: '0.75rem',\n  '2xl': '1rem',\n  '3xl': '1.5rem',\n  full: '9999px',\n};\n"})}),"\n",(0,r.jsx)(e.h2,{id:"component-implementation-example",children:"Component Implementation Example"}),"\n",(0,r.jsx)(e.h3,{id:"button-component",children:"Button Component"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/components/atoms/Button/Button.tsx\nimport React from 'react';\nimport { ButtonContainer, IconWrapper } from './Button.styles';\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'outlined' | 'text';\nexport type ButtonSize = 'small' | 'medium' | 'large';\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  children,\n  variant = 'primary',\n  size = 'medium',\n  leftIcon,\n  rightIcon,\n  isLoading = false,\n  isFullWidth = false,\n  disabled,\n  ...props\n}) => {\n  return (\n    <ButtonContainer\n      variant={variant}\n      size={size}\n      isFullWidth={isFullWidth}\n      disabled={disabled || isLoading}\n      {...props}\n    >\n      {isLoading && <span className=\"spinner\" />}\n      {!isLoading && leftIcon && <IconWrapper position=\"left\">{leftIcon}</IconWrapper>}\n      <span className=\"button-text\">{children}</span>\n      {!isLoading && rightIcon && <IconWrapper position=\"right\">{rightIcon}</IconWrapper>}\n    </ButtonContainer>\n  );\n};\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/components/atoms/Button/Button.styles.ts\nimport styled, { css } from 'styled-components';\nimport { ButtonProps, ButtonVariant, ButtonSize } from './Button';\nimport { colors, typography, spacing } from '../../../themes/tokens';\n\nconst variantStyles = {\n  primary: css`\n    background-color: ${colors.primary[600]};\n    color: white;\n    &:hover:not(:disabled) {\n      background-color: ${colors.primary[700]};\n    }\n    &:active:not(:disabled) {\n      background-color: ${colors.primary[800]};\n    }\n  `,\n  secondary: css`\n    background-color: ${colors.gray[200]};\n    color: ${colors.gray[800]};\n    &:hover:not(:disabled) {\n      background-color: ${colors.gray[300]};\n    }\n    &:active:not(:disabled) {\n      background-color: ${colors.gray[400]};\n    }\n  `,\n  outlined: css`\n    background-color: transparent;\n    color: ${colors.primary[600]};\n    border: 1px solid ${colors.primary[600]};\n    &:hover:not(:disabled) {\n      background-color: ${colors.primary[50]};\n    }\n    &:active:not(:disabled) {\n      background-color: ${colors.primary[100]};\n    }\n  `,\n  text: css`\n    background-color: transparent;\n    color: ${colors.primary[600]};\n    &:hover:not(:disabled) {\n      background-color: ${colors.primary[50]};\n    }\n    &:active:not(:disabled) {\n      background-color: ${colors.primary[100]};\n    }\n  `,\n};\n\nconst sizeStyles = {\n  small: css`\n    padding: ${spacing[1.5]} ${spacing[3]};\n    font-size: ${typography.fontSize.sm};\n  `,\n  medium: css`\n    padding: ${spacing[2]} ${spacing[4]};\n    font-size: ${typography.fontSize.base};\n  `,\n  large: css`\n    padding: ${spacing[2.5]} ${spacing[5]};\n    font-size: ${typography.fontSize.lg};\n  `,\n};\n\nexport const ButtonContainer = styled.button<{\n  variant: ButtonVariant;\n  size: ButtonSize;\n  isFullWidth: boolean;\n}>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 0.25rem;\n  font-weight: ${typography.fontWeight.medium};\n  transition: all 0.2s ease;\n  cursor: pointer;\n  border: none;\n  outline: none;\n  width: ${props => (props.isFullWidth ? '100%' : 'auto')};\n  \n  ${props => variantStyles[props.variant]}\n  ${props => sizeStyles[props.size]}\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n  \n  .spinner {\n    display: inline-block;\n    width: 1em;\n    height: 1em;\n    border: 2px solid currentColor;\n    border-right-color: transparent;\n    border-radius: 50%;\n    animation: spin 0.75s linear infinite;\n    margin-right: ${spacing[2]};\n  }\n  \n  @keyframes spin {\n    to { transform: rotate(360deg); }\n  }\n`;\n\nexport const IconWrapper = styled.span<{ position: 'left' | 'right' }>`\n  display: inline-flex;\n  align-items: center;\n  margin-left: ${props => (props.position === 'right' ? spacing[2] : 0)};\n  margin-right: ${props => (props.position === 'left' ? spacing[2] : 0)};\n`;\n"})}),"\n",(0,r.jsx)(e.h2,{id:"storybook-integration",children:"Storybook Integration"}),"\n",(0,r.jsx)(e.p,{children:"Document your components with Storybook:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/components/atoms/Button/Button.stories.tsx\nimport React from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { Button } from './Button';\nimport { FiArrowRight, FiPlus } from 'react-icons/fi';\n\nconst meta: Meta<typeof Button> = {\n  title: 'Atoms/Button',\n  component: Button,\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['primary', 'secondary', 'outlined', 'text'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['small', 'medium', 'large'],\n    },\n    isLoading: { control: 'boolean' },\n    isFullWidth: { control: 'boolean' },\n    disabled: { control: 'boolean' },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  args: {\n    variant: 'primary',\n    children: 'Primary Button',\n  },\n};\n\nexport const Secondary: Story = {\n  args: {\n    variant: 'secondary',\n    children: 'Secondary Button',\n  },\n};\n\nexport const Outlined: Story = {\n  args: {\n    variant: 'outlined',\n    children: 'Outlined Button',\n  },\n};\n\nexport const Text: Story = {\n  args: {\n    variant: 'text',\n    children: 'Text Button',\n  },\n};\n\nexport const WithLeftIcon: Story = {\n  args: {\n    variant: 'primary',\n    children: 'Add Item',\n    leftIcon: <FiPlus />,\n  },\n};\n\nexport const WithRightIcon: Story = {\n  args: {\n    variant: 'primary',\n    children: 'Next Step',\n    rightIcon: <FiArrowRight />,\n  },\n};\n\nexport const Loading: Story = {\n  args: {\n    variant: 'primary',\n    children: 'Loading',\n    isLoading: true,\n  },\n};\n\nexport const Disabled: Story = {\n  args: {\n    variant: 'primary',\n    children: 'Disabled',\n    disabled: true,\n  },\n};\n\nexport const FullWidth: Story = {\n  args: {\n    variant: 'primary',\n    children: 'Full Width Button',\n    isFullWidth: true,\n  },\n};\n"})}),"\n",(0,r.jsx)(e.h2,{id:"testing-components",children:"Testing Components"}),"\n",(0,r.jsx)(e.p,{children:"Write comprehensive tests for your components:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/components/atoms/Button/Button.test.tsx\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { Button } from './Button';\nimport { FiArrowRight } from 'react-icons/fi';\n\ndescribe('Button component', () => {\n  test('renders correctly with default props', () => {\n    render(<Button>Click me</Button>);\n    expect(screen.getByText('Click me')).toBeInTheDocument();\n  });\n\n  test('applies correct variant styles', () => {\n    const { rerender } = render(<Button variant=\"primary\">Primary</Button>);\n    expect(screen.getByText('Primary')).toHaveStyle('background-color: #7C3AED');\n    \n    rerender(<Button variant=\"secondary\">Secondary</Button>);\n    expect(screen.getByText('Secondary')).toHaveStyle('background-color: #E5E7EB');\n    \n    rerender(<Button variant=\"outlined\">Outlined</Button>);\n    expect(screen.getByText('Outlined')).toHaveStyle('border: 1px solid #7C3AED');\n    \n    rerender(<Button variant=\"text\">Text</Button>);\n    expect(screen.getByText('Text')).toHaveStyle('background-color: transparent');\n  });\n\n  test('applies correct size styles', () => {\n    const { rerender } = render(<Button size=\"small\">Small</Button>);\n    const button = screen.getByText('Small');\n    expect(button).toHaveStyle('padding: 0.375rem 0.75rem');\n    \n    rerender(<Button size=\"medium\">Medium</Button>);\n    expect(screen.getByText('Medium')).toHaveStyle('padding: 0.5rem 1rem');\n    \n    rerender(<Button size=\"large\">Large</Button>);\n    expect(screen.getByText('Large')).toHaveStyle('padding: 0.625rem 1.25rem');\n  });\n\n  test('renders with icons', () => {\n    render(\n      <Button leftIcon={<span data-testid=\"left-icon\" />} rightIcon={<span data-testid=\"right-icon\" />}>\n        With Icons\n      </Button>\n    );\n    \n    expect(screen.getByTestId('left-icon')).toBeInTheDocument();\n    expect(screen.getByTestId('right-icon')).toBeInTheDocument();\n  });\n\n  test('shows loading spinner when isLoading is true', () => {\n    render(<Button isLoading>Loading</Button>);\n    expect(screen.getByText('Loading')).toBeInTheDocument();\n    expect(document.querySelector('.spinner')).toBeInTheDocument();\n  });\n\n  test('applies full width style when isFullWidth is true', () => {\n    render(<Button isFullWidth>Full Width</Button>);\n    expect(screen.getByText('Full Width')).toHaveStyle('width: 100%');\n  });\n\n  test('is disabled when disabled prop is true', () => {\n    render(<Button disabled>Disabled</Button>);\n    expect(screen.getByText('Disabled')).toBeDisabled();\n  });\n\n  test('calls onClick handler when clicked', () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick}>Click me</Button>);\n    \n    fireEvent.click(screen.getByText('Click me'));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  test('does not call onClick when disabled', () => {\n    const handleClick = jest.fn();\n    render(<Button disabled onClick={handleClick}>Disabled</Button>);\n    \n    fireEvent.click(screen.getByText('Disabled'));\n    expect(handleClick).not.toHaveBeenCalled();\n  });\n});\n"})}),"\n",(0,r.jsx)(e.h2,{id:"publishing-your-component-library",children:"Publishing Your Component Library"}),"\n",(0,r.jsx)(e.p,{children:"Set up your package.json for publishing:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'{\n  "name": "figma-component-library",\n  "version": "1.0.0",\n  "description": "Component library based on Figma designs",\n  "main": "dist/index.js",\n  "module": "dist/index.esm.js",\n  "types": "dist/index.d.ts",\n  "files": [\n    "dist"\n  ],\n  "scripts": {\n    "build": "rollup -c",\n    "test": "jest",\n    "storybook": "start-storybook -p 6006",\n    "build-storybook": "build-storybook",\n    "prepublishOnly": "npm run build"\n  },\n  "peerDependencies": {\n    "react": "^17.0.0 || ^18.0.0",\n    "react-dom": "^17.0.0 || ^18.0.0",\n    "styled-components": "^5.3.0"\n  },\n  "devDependencies": {\n    // Development dependencies\n  }\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"By following these guidelines, you'll create a robust component library that accurately reflects your Figma designs and provides a consistent user experience across your applications."})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>a});var o=t(6540);const r={},i=o.createContext(r);function s(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);